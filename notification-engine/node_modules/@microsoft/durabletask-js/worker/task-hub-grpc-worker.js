"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TaskHubGrpcWorker = void 0;
const pb = __importStar(require("../proto/orchestrator_service_pb"));
const registry_1 = require("./registry");
const client_grpc_1 = require("../client/client-grpc");
const util_1 = require("util");
const empty_pb_1 = require("google-protobuf/google/protobuf/empty_pb");
const pbh = __importStar(require("../utils/pb-helper.util"));
const orchestration_executor_1 = require("./orchestration-executor");
const activity_executor_1 = require("./activity-executor");
const wrappers_pb_1 = require("google-protobuf/google/protobuf/wrappers_pb");
class TaskHubGrpcWorker {
    constructor(hostAddress, options) {
        this._registry = new registry_1.Registry();
        this._hostAddress = hostAddress;
        this._grpcChannelOptions = options;
        this._responseStream = null;
        this._isRunning = false;
        this._stub = null;
    }
    /**
     * Registers an orchestrator function with the worker.
     *
     * @param fn
     * @returns
     */
    addOrchestrator(fn) {
        if (this._isRunning) {
            throw new Error("Cannot add orchestrator while worker is running.");
        }
        return this._registry.addOrchestrator(fn);
    }
    /**
     * Registers an named orchestrator function with the worker.
     *
     * @param fn
     * @returns
     */
    addNamedOrchestrator(name, fn) {
        if (this._isRunning) {
            throw new Error("Cannot add orchestrator while worker is running.");
        }
        this._registry.addNamedOrchestrator(name, fn);
        return name;
    }
    /**
     * Registers an activity function with the worker.
     *
     * @param fn
     * @returns
     */
    addActivity(fn) {
        if (this._isRunning) {
            throw new Error("Cannot add activity while worker is running.");
        }
        return this._registry.addActivity(fn);
    }
    /**
     * Registers an named activity function with the worker.
     *
     * @param fn
     * @returns
     */
    addNamedActivity(name, fn) {
        if (this._isRunning) {
            throw new Error("Cannot add activity while worker is running.");
        }
        this._registry.addNamedActivity(name, fn);
        return name;
    }
    /**
     * In node.js we don't require a new thread as we have a main event loop
     * Therefore, we open the stream and simply listen through the eventemitter behind the scenes
     */
    async start() {
        const client = new client_grpc_1.GrpcClient(this._hostAddress, this._grpcChannelOptions);
        if (this._isRunning) {
            throw new Error("The worker is already running.");
        }
        // send a "Hello" message to the sidecar to ensure that it's listening
        const prom = (0, util_1.promisify)(client.stub.hello.bind(client.stub));
        await prom(new empty_pb_1.Empty());
        // Stream work items from the sidecar
        const stubGetWorkItemsReq = new pb.GetWorkItemsRequest();
        this._stub = client.stub;
        this._responseStream = client.stub.getWorkItems(stubGetWorkItemsReq);
        console.log(`Successfully connected to ${this._hostAddress}. Waiting for work items...`);
        // Wait for a work item to be received
        this._responseStream.on("data", (workItem) => {
            if (workItem.hasOrchestratorrequest()) {
                console.log(`Received "Orchestrator Request" work item with instance id '${workItem
                    ?.getOrchestratorrequest()
                    ?.getInstanceid()}'`);
                this._executeOrchestrator(workItem.getOrchestratorrequest(), client.stub);
            }
            else if (workItem.hasActivityrequest()) {
                console.log(`Received "Activity Request" work item`);
                this._executeActivity(workItem.getActivityrequest(), client.stub);
            }
            else {
                console.log(`Received unknown work item`);
            }
        });
        // Wait for the stream to end or error
        this._responseStream.on("end", () => {
            console.log("Stream ended");
        });
        this._responseStream.on("error", (err) => {
            console.log("Stream error", err);
        });
        this._isRunning = true;
    }
    /**
     * Stop the worker and wait for any pending work items to complete
     */
    async stop() {
        if (!this._isRunning) {
            throw new Error("The worker is not running.");
        }
        this._responseStream?.cancel();
        this._responseStream?.destroy();
        this._stub?.close();
        this._isRunning = false;
        // Wait a bit to let the async operations finish
        // https://github.com/grpc/grpc-node/issues/1563#issuecomment-829483711
        await new Promise((resolve) => setTimeout(resolve, 1000));
    }
    /**
     *
     */
    async _executeOrchestrator(req, stub) {
        const instanceId = req.getInstanceid();
        if (!instanceId) {
            throw new Error(`Could not execute the orchestrator as the instanceId was not provided (${instanceId})`);
        }
        let res;
        try {
            const executor = new orchestration_executor_1.OrchestrationExecutor(this._registry);
            const actions = await executor.execute(req.getInstanceid(), req.getPasteventsList(), req.getNeweventsList());
            res = new pb.OrchestratorResponse();
            res.setInstanceid(req.getInstanceid());
            res.setActionsList(actions);
        }
        catch (e) {
            console.error(e);
            console.log(`An error occurred while trying to execute instance '${req.getInstanceid()}': ${e.message}`);
            const failureDetails = pbh.newFailureDetails(e);
            const actions = [
                pbh.newCompleteOrchestrationAction(-1, pb.OrchestrationStatus.ORCHESTRATION_STATUS_FAILED, failureDetails?.toString()),
            ];
            res = new pb.OrchestratorResponse();
            res.setInstanceid(req.getInstanceid());
            res.setActionsList(actions);
        }
        try {
            const stubCompleteOrchestratorTask = (0, util_1.promisify)(stub.completeOrchestratorTask.bind(stub));
            await stubCompleteOrchestratorTask(res);
        }
        catch (e) {
            console.error(`An error occurred while trying to complete instance '${req.getInstanceid()}': ${e?.message}`);
        }
    }
    /**
     *
     */
    async _executeActivity(req, stub) {
        const instanceId = req.getOrchestrationinstance()?.getInstanceid();
        if (!instanceId) {
            throw new Error("Activity request does not contain an orchestration instance id");
        }
        let res;
        try {
            const executor = new activity_executor_1.ActivityExecutor(this._registry);
            const result = await executor.execute(instanceId, req.getName(), req.getTaskid(), req.getInput()?.toString() ?? "");
            const s = new wrappers_pb_1.StringValue();
            s.setValue(result?.toString() ?? "");
            res = new pb.ActivityResponse();
            res.setInstanceid(instanceId);
            res.setTaskid(req.getTaskid());
            res.setResult(s);
        }
        catch (e) {
            console.error(e);
            console.log(`An error occurred while trying to execute activity '${req.getName()}': ${e.message}`);
            const failureDetails = pbh.newFailureDetails(e);
            res = new pb.ActivityResponse();
            res.setTaskid(req.getTaskid());
            res.setFailuredetails(failureDetails);
        }
        try {
            const stubCompleteActivityTask = (0, util_1.promisify)(stub.completeActivityTask.bind(stub));
            await stubCompleteActivityTask(res);
        }
        catch (e) {
            console.error(`Failed to deliver activity response for '${req.getName()}#${req.getTaskid()}' of orchestration ID '${instanceId}' to sidecar: ${e?.message}`);
        }
    }
}
exports.TaskHubGrpcWorker = TaskHubGrpcWorker;

// SIG // Begin signature block
// SIG // MIInvQYJKoZIhvcNAQcCoIInrjCCJ6oCAQExDzANBglg
// SIG // hkgBZQMEAgEFADB3BgorBgEEAYI3AgEEoGkwZzAyBgor
// SIG // BgEEAYI3AgEeMCQCAQEEEBDgyQbOONQRoqMAEEvTUJAC
// SIG // AQACAQACAQACAQACAQAwMTANBglghkgBZQMEAgEFAAQg
// SIG // cr1/0+BCteWE6NdyP1UE2y0Wt6R7RyOKNKJoQgE81qWg
// SIG // gg12MIIF9DCCA9ygAwIBAgITMwAAA68wQA5Mo00FQQAA
// SIG // AAADrzANBgkqhkiG9w0BAQsFADB+MQswCQYDVQQGEwJV
// SIG // UzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMH
// SIG // UmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBv
// SIG // cmF0aW9uMSgwJgYDVQQDEx9NaWNyb3NvZnQgQ29kZSBT
// SIG // aWduaW5nIFBDQSAyMDExMB4XDTIzMTExNjE5MDkwMFoX
// SIG // DTI0MTExNDE5MDkwMFowdDELMAkGA1UEBhMCVVMxEzAR
// SIG // BgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1v
// SIG // bmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlv
// SIG // bjEeMBwGA1UEAxMVTWljcm9zb2Z0IENvcnBvcmF0aW9u
// SIG // MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA
// SIG // zkvLNa2un9GBrYNDoRGkGv7d0PqtTBB4ViYakFbjuWpm
// SIG // F0KcvDAzzaCWJPhVgIXjz+S8cHEoHuWnp/n+UOljT3eh
// SIG // A8Rs6Lb1aTYub3tB/e0txewv2sQ3yscjYdtTBtFvEm9L
// SIG // 8Yv76K3Cxzi/Yvrdg+sr7w8y5RHn1Am0Ff8xggY1xpWC
// SIG // XFI+kQM18njQDcUqSlwBnexYfqHBhzz6YXA/S0EziYBu
// SIG // 2O2mM7R6gSyYkEOHgIGTVOGnOvvC5xBgC4KNcnQuQSRL
// SIG // iUI2CmzU8vefR6ykruyzt1rNMPI8OqWHQtSDKXU5JNqb
// SIG // k4GNjwzcwbSzOHrxuxWHq91l/vLdVDGDUwIDAQABo4IB
// SIG // czCCAW8wHwYDVR0lBBgwFgYKKwYBBAGCN0wIAQYIKwYB
// SIG // BQUHAwMwHQYDVR0OBBYEFEcccTTyBDxkjvJKs/m4AgEF
// SIG // hl7BMEUGA1UdEQQ+MDykOjA4MR4wHAYDVQQLExVNaWNy
// SIG // b3NvZnQgQ29ycG9yYXRpb24xFjAUBgNVBAUTDTIzMDAx
// SIG // Mis1MDE4MjYwHwYDVR0jBBgwFoAUSG5k5VAF04KqFzc3
// SIG // IrVtqMp1ApUwVAYDVR0fBE0wSzBJoEegRYZDaHR0cDov
// SIG // L3d3dy5taWNyb3NvZnQuY29tL3BraW9wcy9jcmwvTWlj
// SIG // Q29kU2lnUENBMjAxMV8yMDExLTA3LTA4LmNybDBhBggr
// SIG // BgEFBQcBAQRVMFMwUQYIKwYBBQUHMAKGRWh0dHA6Ly93
// SIG // d3cubWljcm9zb2Z0LmNvbS9wa2lvcHMvY2VydHMvTWlj
// SIG // Q29kU2lnUENBMjAxMV8yMDExLTA3LTA4LmNydDAMBgNV
// SIG // HRMBAf8EAjAAMA0GCSqGSIb3DQEBCwUAA4ICAQCEsRbf
// SIG // 80dn60xTweOWHZoWaQdpzSaDqIvqpYHE5ZzuEMJWDdcP
// SIG // 72MGw8v6BSaJQ+a+hTCXdERnIBDPKvU4ENjgu4EBJocH
// SIG // lSe8riiZUAR+z+z4OUYqoFd3EqJyfjjOJBR2z94Dy4ss
// SIG // 7LEkHUbj2NZiFqBoPYu2OGQvEk+1oaUsnNKZ7Nl7FHtV
// SIG // 7CI2lHBru83e4IPe3glIi0XVZJT5qV6Gx/QhAFmpEVBj
// SIG // SAmDdgII4UUwuI9yiX6jJFNOEek6MoeP06LMJtbqA3Bq
// SIG // +ZWmJ033F97uVpyaiS4bj3vFI/ZBgDnMqNDtZjcA2vi4
// SIG // RRMweggd9vsHyTLpn6+nXoLy03vMeebq0C3k44pgUIEu
// SIG // PQUlJIRTe6IrN3GcjaZ6zHGuQGWgu6SyO9r7qkrEpS2p
// SIG // RjnGZjx2RmCamdAWnDdu+DmfNEPAddYjaJJ7PTnd+PGz
// SIG // G+WeH4ocWgVnm5fJFhItjj70CJjgHqt57e1FiQcyWCwB
// SIG // hKX2rGgN2UICHBF3Q/rsKOspjMw2OlGphTn2KmFl5J7c
// SIG // Qxru54A9roClLnHGCiSUYos/iwFHI/dAVXEh0S0KKfTf
// SIG // M6AC6/9bCbsD61QLcRzRIElvgCgaiMWFjOBL99pemoEl
// SIG // AHsyzG6uX93fMfas09N9YzA0/rFAKAsNDOcFbQlEHKiD
// SIG // T7mI20tVoCcmSIhJATCCB3owggVioAMCAQICCmEOkNIA
// SIG // AAAAAAMwDQYJKoZIhvcNAQELBQAwgYgxCzAJBgNVBAYT
// SIG // AlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQH
// SIG // EwdSZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29y
// SIG // cG9yYXRpb24xMjAwBgNVBAMTKU1pY3Jvc29mdCBSb290
// SIG // IENlcnRpZmljYXRlIEF1dGhvcml0eSAyMDExMB4XDTEx
// SIG // MDcwODIwNTkwOVoXDTI2MDcwODIxMDkwOVowfjELMAkG
// SIG // A1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAO
// SIG // BgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29m
// SIG // dCBDb3Jwb3JhdGlvbjEoMCYGA1UEAxMfTWljcm9zb2Z0
// SIG // IENvZGUgU2lnbmluZyBQQ0EgMjAxMTCCAiIwDQYJKoZI
// SIG // hvcNAQEBBQADggIPADCCAgoCggIBAKvw+nIQHC6t2G6q
// SIG // ghBNNLrytlghn0IbKmvpWlCquAY4GgRJun/DDB7dN2vG
// SIG // EtgL8DjCmQawyDnVARQxQtOJDXlkh36UYCRsr55JnOlo
// SIG // XtLfm1OyCizDr9mpK656Ca/XllnKYBoF6WZ26DJSJhIv
// SIG // 56sIUM+zRLdd2MQuA3WraPPLbfM6XKEW9Ea64DhkrG5k
// SIG // NXimoGMPLdNAk/jj3gcN1Vx5pUkp5w2+oBN3vpQ97/vj
// SIG // K1oQH01WKKJ6cuASOrdJXtjt7UORg9l7snuGG9k+sYxd
// SIG // 6IlPhBryoS9Z5JA7La4zWMW3Pv4y07MDPbGyr5I4ftKd
// SIG // gCz1TlaRITUlwzluZH9TupwPrRkjhMv0ugOGjfdf8NBS
// SIG // v4yUh7zAIXQlXxgotswnKDglmDlKNs98sZKuHCOnqWbs
// SIG // YR9q4ShJnV+I4iVd0yFLPlLEtVc/JAPw0XpbL9Uj43Bd
// SIG // D1FGd7P4AOG8rAKCX9vAFbO9G9RVS+c5oQ/pI0m8GLhE
// SIG // fEXkwcNyeuBy5yTfv0aZxe/CHFfbg43sTUkwp6uO3+xb
// SIG // n6/83bBm4sGXgXvt1u1L50kppxMopqd9Z4DmimJ4X7Iv
// SIG // hNdXnFy/dygo8e1twyiPLI9AN0/B4YVEicQJTMXUpUMv
// SIG // dJX3bvh4IFgsE11glZo+TzOE2rCIF96eTvSWsLxGoGyY
// SIG // 0uDWiIwLAgMBAAGjggHtMIIB6TAQBgkrBgEEAYI3FQEE
// SIG // AwIBADAdBgNVHQ4EFgQUSG5k5VAF04KqFzc3IrVtqMp1
// SIG // ApUwGQYJKwYBBAGCNxQCBAweCgBTAHUAYgBDAEEwCwYD
// SIG // VR0PBAQDAgGGMA8GA1UdEwEB/wQFMAMBAf8wHwYDVR0j
// SIG // BBgwFoAUci06AjGQQ7kUBU7h6qfHMdEjiTQwWgYDVR0f
// SIG // BFMwUTBPoE2gS4ZJaHR0cDovL2NybC5taWNyb3NvZnQu
// SIG // Y29tL3BraS9jcmwvcHJvZHVjdHMvTWljUm9vQ2VyQXV0
// SIG // MjAxMV8yMDExXzAzXzIyLmNybDBeBggrBgEFBQcBAQRS
// SIG // MFAwTgYIKwYBBQUHMAKGQmh0dHA6Ly93d3cubWljcm9z
// SIG // b2Z0LmNvbS9wa2kvY2VydHMvTWljUm9vQ2VyQXV0MjAx
// SIG // MV8yMDExXzAzXzIyLmNydDCBnwYDVR0gBIGXMIGUMIGR
// SIG // BgkrBgEEAYI3LgMwgYMwPwYIKwYBBQUHAgEWM2h0dHA6
// SIG // Ly93d3cubWljcm9zb2Z0LmNvbS9wa2lvcHMvZG9jcy9w
// SIG // cmltYXJ5Y3BzLmh0bTBABggrBgEFBQcCAjA0HjIgHQBM
// SIG // AGUAZwBhAGwAXwBwAG8AbABpAGMAeQBfAHMAdABhAHQA
// SIG // ZQBtAGUAbgB0AC4gHTANBgkqhkiG9w0BAQsFAAOCAgEA
// SIG // Z/KGpZjgVHkaLtPYdGcimwuWEeFjkplCln3SeQyQwWVf
// SIG // Liw++MNy0W2D/r4/6ArKO79HqaPzadtjvyI1pZddZYSQ
// SIG // fYtGUFXYDJJ80hpLHPM8QotS0LD9a+M+By4pm+Y9G6XU
// SIG // tR13lDni6WTJRD14eiPzE32mkHSDjfTLJgJGKsKKELuk
// SIG // qQUMm+1o+mgulaAqPyprWEljHwlpblqYluSD9MCP80Yr
// SIG // 3vw70L01724lruWvJ+3Q3fMOr5kol5hNDj0L8giJ1h/D
// SIG // Mhji8MUtzluetEk5CsYKwsatruWy2dsViFFFWDgycSca
// SIG // f7H0J/jeLDogaZiyWYlobm+nt3TDQAUGpgEqKD6CPxNN
// SIG // ZgvAs0314Y9/HG8VfUWnduVAKmWjw11SYobDHWM2l4bf
// SIG // 2vP48hahmifhzaWX0O5dY0HjWwechz4GdwbRBrF1HxS+
// SIG // YWG18NzGGwS+30HHDiju3mUv7Jf2oVyW2ADWoUa9WfOX
// SIG // pQlLSBCZgB/QACnFsZulP0V3HjXG0qKin3p6IvpIlR+r
// SIG // +0cjgPWe+L9rt0uX4ut1eBrs6jeZeRhL/9azI2h15q/6
// SIG // /IvrC4DqaTuv/DDtBEyO3991bWORPdGdVk5Pv4BXIqF4
// SIG // ETIheu9BCrE/+6jMpF3BoYibV3FWTkhFwELJm3ZbCoBI
// SIG // a/15n8G9bW1qyVJzEw16UM0xghmfMIIZmwIBATCBlTB+
// SIG // MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3Rv
// SIG // bjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWlj
// SIG // cm9zb2Z0IENvcnBvcmF0aW9uMSgwJgYDVQQDEx9NaWNy
// SIG // b3NvZnQgQ29kZSBTaWduaW5nIFBDQSAyMDExAhMzAAAD
// SIG // rzBADkyjTQVBAAAAAAOvMA0GCWCGSAFlAwQCAQUAoIGu
// SIG // MBkGCSqGSIb3DQEJAzEMBgorBgEEAYI3AgEEMBwGCisG
// SIG // AQQBgjcCAQsxDjAMBgorBgEEAYI3AgEVMC8GCSqGSIb3
// SIG // DQEJBDEiBCAbe5BZYIN/jj6LVySUIiHiivE+m58vehCc
// SIG // 64+Y82qL+zBCBgorBgEEAYI3AgEMMTQwMqAUgBIATQBp
// SIG // AGMAcgBvAHMAbwBmAHShGoAYaHR0cDovL3d3dy5taWNy
// SIG // b3NvZnQuY29tMA0GCSqGSIb3DQEBAQUABIIBAI5/OG4h
// SIG // K7tIqtlvF07yc/c1lu8oqDTidstjGOWPFBiAV5mYiE16
// SIG // udq0ikKrB8ZoKy3fKowqi4YKwAApPssICSU9NkOI8hFf
// SIG // Ds9mnZ8xK9KYF9s+9flo+fHvxNSk2m8CMZs0v0ZxWk7G
// SIG // MTQU5yw9D19Y/PNyJU24pUo+ic11aSRHUxIL652TsLwE
// SIG // /WrtfkQPrt9+YgSreGMPY+4n0ZA/z86GO1Dkr5FztdvD
// SIG // NguQhY8M9F3RGRDhERdATPr3NWd5IhtYMBlUz/6seAEw
// SIG // Iou8anFR42Du0hdGhH2koFN/CmhM83/JDNsiyfS5FVGk
// SIG // F7a5lAg68HY+31eNOFzz+F5VlPihghcpMIIXJQYKKwYB
// SIG // BAGCNwMDATGCFxUwghcRBgkqhkiG9w0BBwKgghcCMIIW
// SIG // /gIBAzEPMA0GCWCGSAFlAwQCAQUAMIIBWQYLKoZIhvcN
// SIG // AQkQAQSgggFIBIIBRDCCAUACAQEGCisGAQQBhFkKAwEw
// SIG // MTANBglghkgBZQMEAgEFAAQgmZ+c5/vtzit0/9QGAoVB
// SIG // 1DXYGcKdHkUy3ovEwMwfUD0CBmWC4DVZqhgTMjAyNDAx
// SIG // MDgxODE1NDcuMjgxWjAEgAIB9KCB2KSB1TCB0jELMAkG
// SIG // A1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAO
// SIG // BgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29m
// SIG // dCBDb3Jwb3JhdGlvbjEtMCsGA1UECxMkTWljcm9zb2Z0
// SIG // IElyZWxhbmQgT3BlcmF0aW9ucyBMaW1pdGVkMSYwJAYD
// SIG // VQQLEx1UaGFsZXMgVFNTIEVTTjowODQyLTRCRTYtQzI5
// SIG // QTElMCMGA1UEAxMcTWljcm9zb2Z0IFRpbWUtU3RhbXAg
// SIG // U2VydmljZaCCEXgwggcnMIIFD6ADAgECAhMzAAAB2o7V
// SIG // yVoA0RGxAAEAAAHaMA0GCSqGSIb3DQEBCwUAMHwxCzAJ
// SIG // BgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAw
// SIG // DgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNyb3Nv
// SIG // ZnQgQ29ycG9yYXRpb24xJjAkBgNVBAMTHU1pY3Jvc29m
// SIG // dCBUaW1lLVN0YW1wIFBDQSAyMDEwMB4XDTIzMTAxMjE5
// SIG // MDY1OVoXDTI1MDExMDE5MDY1OVowgdIxCzAJBgNVBAYT
// SIG // AlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQH
// SIG // EwdSZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29y
// SIG // cG9yYXRpb24xLTArBgNVBAsTJE1pY3Jvc29mdCBJcmVs
// SIG // YW5kIE9wZXJhdGlvbnMgTGltaXRlZDEmMCQGA1UECxMd
// SIG // VGhhbGVzIFRTUyBFU046MDg0Mi00QkU2LUMyOUExJTAj
// SIG // BgNVBAMTHE1pY3Jvc29mdCBUaW1lLVN0YW1wIFNlcnZp
// SIG // Y2UwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoIC
// SIG // AQCTkAYIdrVRUdY/I0AODQ3/G3Fa10jdPNAjSj0kKO0u
// SIG // e7Apz1NBSheO8Ni+qh7cJuBJwpRdnK7lxaf5ez6TEINu
// SIG // RO1/MQ5r8a/AQROogEgDwn603m7rwLGVnCWIcu6a4Arg
// SIG // X+zonV6YLFtcvKelbO7A9mrqf9Lr3mMXl5SrbD4zAqZR
// SIG // 5JNG2vh4C4aNCevCnY4twzNiufcB8vca7bGCvl/Xq2wx
// SIG // mdppl9++uWkuUO/7oA8TFYM8o/NMiZ+lC55Jw/YuJFEM
// SIG // VYaldXXPwxelAXrs37pJDHne7a81BGTEcpWu6ob8FHkJ
// SIG // YMwkIaWY8/s7EIKV5T3M7xndIqq+5QAsH1RqIOaZSM3R
// SIG // Mb7dUwPCZnn/NfWkysB9SFRCMGCwOrr0vJEXQOkcbzHG
// SIG // //7pTYyLhnHsspDAFxMp1ayxvVbyuK36wrBi9499C5on
// SIG // boPqMK3Ao0GoGJqxpNYQcpF4paPWAfEMsuUNSoRrh+uV
// SIG // d8xcvGtJMGygUbPFUeB7aD2MPc9Q3XCX2QTtnYc198gD
// SIG // IqQhpukpr5r2r0bF4cvNOY4gKQ8jfrNP2+6LNs/IkVhi
// SIG // ZOjPbrk9uPd4BVf/SSxoOWCSQiVyPssZDvzl52SbLhrd
// SIG // Ps1i3R0uFyFwRte6D7uSrBX0Ux0RJaEdnSOhsGmsSMg8
// SIG // kh2DrbyMnZWu7uJX53wo2P6ikwIDAQABo4IBSTCCAUUw
// SIG // HQYDVR0OBBYEFKF8jclRPWYTlYsxFFcITYC/D19FMB8G
// SIG // A1UdIwQYMBaAFJ+nFV0AXmJdg/Tl0mWnG1M1GelyMF8G
// SIG // A1UdHwRYMFYwVKBSoFCGTmh0dHA6Ly93d3cubWljcm9z
// SIG // b2Z0LmNvbS9wa2lvcHMvY3JsL01pY3Jvc29mdCUyMFRp
// SIG // bWUtU3RhbXAlMjBQQ0ElMjAyMDEwKDEpLmNybDBsBggr
// SIG // BgEFBQcBAQRgMF4wXAYIKwYBBQUHMAKGUGh0dHA6Ly93
// SIG // d3cubWljcm9zb2Z0LmNvbS9wa2lvcHMvY2VydHMvTWlj
// SIG // cm9zb2Z0JTIwVGltZS1TdGFtcCUyMFBDQSUyMDIwMTAo
// SIG // MSkuY3J0MAwGA1UdEwEB/wQCMAAwFgYDVR0lAQH/BAww
// SIG // CgYIKwYBBQUHAwgwDgYDVR0PAQH/BAQDAgeAMA0GCSqG
// SIG // SIb3DQEBCwUAA4ICAQC5g1XU7biNIwBLeNTtjjPAlNt+
// SIG // 0xjMoaxq+xcyghBWl8baKpPyDm0K4qtXGh1Ydr8rkNuJ
// SIG // 8903Tgb+63LP6pz4zsZ1xS8mT3mli7DbgEVZlFYslWF4
// SIG // 12AeQ8M2lmYEnGPBii+8ho8lq4e/FiVIIe6xNfuVQ+Yd
// SIG // P+q7PXQUagMyPX4Wc+7KbI7fL58edFhMWwUkh+632mx3
// SIG // p3aXqm05lv0X3Gk/hhSLE/oNno+8ESiKv0IZ7KBfJqRT
// SIG // Tx1dav1iv6xfwoaL5ISTA75arRE1ovexqJTkimpmQvW2
// SIG // IHDyn89vHnduVictdFbUPT+fgv9nTnw2s9UZnjm9uym3
// SIG // oIWtEnz3K4k3zkVb6jw0mt5/Te3YU2O/uPSPHr6GnfYX
// SIG // WfAnyDj37cLd8U19kYTGSQlaBZWmx3L32/OK2hTOnM+R
// SIG // GJPsdWlRIl7YCukdMZ9cIzFx39AFpUo6kZM70p0SsxbG
// SIG // cBJe+FWoZSlYSPgovUU/fuhnNMVsye80CFBRNyYosefu
// SIG // yi/AKx3wWPVBS8+LJ26Ce0IqdyAA25FOGS9IkPI/CMa2
// SIG // u2kmH06FHn5nLd3TOvX3+BHodiofTbCooqYefPQKf8Ut
// SIG // YxEpa34y/4P2W6GkuXfWtnwOffJrmw7yw+ceTz9++9NL
// SIG // 5v2PjyIZqdn077ktrJ3XmQZsk6nFDR0TZgpPp41d5zCC
// SIG // B3EwggVZoAMCAQICEzMAAAAVxedrngKbSZkAAAAAABUw
// SIG // DQYJKoZIhvcNAQELBQAwgYgxCzAJBgNVBAYTAlVTMRMw
// SIG // EQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRt
// SIG // b25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRp
// SIG // b24xMjAwBgNVBAMTKU1pY3Jvc29mdCBSb290IENlcnRp
// SIG // ZmljYXRlIEF1dGhvcml0eSAyMDEwMB4XDTIxMDkzMDE4
// SIG // MjIyNVoXDTMwMDkzMDE4MzIyNVowfDELMAkGA1UEBhMC
// SIG // VVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcT
// SIG // B1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jw
// SIG // b3JhdGlvbjEmMCQGA1UEAxMdTWljcm9zb2Z0IFRpbWUt
// SIG // U3RhbXAgUENBIDIwMTAwggIiMA0GCSqGSIb3DQEBAQUA
// SIG // A4ICDwAwggIKAoICAQDk4aZM57RyIQt5osvXJHm9DtWC
// SIG // 0/3unAcH0qlsTnXIyjVX9gF/bErg4r25PhdgM/9cT8dm
// SIG // 95VTcVrifkpa/rg2Z4VGIwy1jRPPdzLAEBjoYH1qUoNE
// SIG // t6aORmsHFPPFdvWGUNzBRMhxXFExN6AKOG6N7dcP2CZT
// SIG // fDlhAnrEqv1yaa8dq6z2Nr41JmTamDu6GnszrYBbfowQ
// SIG // HJ1S/rboYiXcag/PXfT+jlPP1uyFVk3v3byNpOORj7I5
// SIG // LFGc6XBpDco2LXCOMcg1KL3jtIckw+DJj361VI/c+gVV
// SIG // mG1oO5pGve2krnopN6zL64NF50ZuyjLVwIYwXE8s4mKy
// SIG // zbnijYjklqwBSru+cakXW2dg3viSkR4dPf0gz3N9QZpG
// SIG // dc3EXzTdEonW/aUgfX782Z5F37ZyL9t9X4C626p+Nuw2
// SIG // TPYrbqgSUei/BQOj0XOmTTd0lBw0gg/wEPK3Rxjtp+iZ
// SIG // fD9M269ewvPV2HM9Q07BMzlMjgK8QmguEOqEUUbi0b1q
// SIG // GFphAXPKZ6Je1yh2AuIzGHLXpyDwwvoSCtdjbwzJNmSL
// SIG // W6CmgyFdXzB0kZSU2LlQ+QuJYfM2BjUYhEfb3BvR/bLU
// SIG // HMVr9lxSUV0S2yW6r1AFemzFER1y7435UsSFF5PAPBXb
// SIG // GjfHCBUYP3irRbb1Hode2o+eFnJpxq57t7c+auIurQID
// SIG // AQABo4IB3TCCAdkwEgYJKwYBBAGCNxUBBAUCAwEAATAj
// SIG // BgkrBgEEAYI3FQIEFgQUKqdS/mTEmr6CkTxGNSnPEP8v
// SIG // BO4wHQYDVR0OBBYEFJ+nFV0AXmJdg/Tl0mWnG1M1Gely
// SIG // MFwGA1UdIARVMFMwUQYMKwYBBAGCN0yDfQEBMEEwPwYI
// SIG // KwYBBQUHAgEWM2h0dHA6Ly93d3cubWljcm9zb2Z0LmNv
// SIG // bS9wa2lvcHMvRG9jcy9SZXBvc2l0b3J5Lmh0bTATBgNV
// SIG // HSUEDDAKBggrBgEFBQcDCDAZBgkrBgEEAYI3FAIEDB4K
// SIG // AFMAdQBiAEMAQTALBgNVHQ8EBAMCAYYwDwYDVR0TAQH/
// SIG // BAUwAwEB/zAfBgNVHSMEGDAWgBTV9lbLj+iiXGJo0T2U
// SIG // kFvXzpoYxDBWBgNVHR8ETzBNMEugSaBHhkVodHRwOi8v
// SIG // Y3JsLm1pY3Jvc29mdC5jb20vcGtpL2NybC9wcm9kdWN0
// SIG // cy9NaWNSb29DZXJBdXRfMjAxMC0wNi0yMy5jcmwwWgYI
// SIG // KwYBBQUHAQEETjBMMEoGCCsGAQUFBzAChj5odHRwOi8v
// SIG // d3d3Lm1pY3Jvc29mdC5jb20vcGtpL2NlcnRzL01pY1Jv
// SIG // b0NlckF1dF8yMDEwLTA2LTIzLmNydDANBgkqhkiG9w0B
// SIG // AQsFAAOCAgEAnVV9/Cqt4SwfZwExJFvhnnJL/Klv6lwU
// SIG // tj5OR2R4sQaTlz0xM7U518JxNj/aZGx80HU5bbsPMeTC
// SIG // j/ts0aGUGCLu6WZnOlNN3Zi6th542DYunKmCVgADsAW+
// SIG // iehp4LoJ7nvfam++Kctu2D9IdQHZGN5tggz1bSNU5HhT
// SIG // dSRXud2f8449xvNo32X2pFaq95W2KFUn0CS9QKC/GbYS
// SIG // EhFdPSfgQJY4rPf5KYnDvBewVIVCs/wMnosZiefwC2qB
// SIG // woEZQhlSdYo2wh3DYXMuLGt7bj8sCXgU6ZGyqVvfSaN0
// SIG // DLzskYDSPeZKPmY7T7uG+jIa2Zb0j/aRAfbOxnT99kxy
// SIG // bxCrdTDFNLB62FD+CljdQDzHVG2dY3RILLFORy3BFARx
// SIG // v2T5JL5zbcqOCb2zAVdJVGTZc9d/HltEAY5aGZFrDZ+k
// SIG // KNxnGSgkujhLmm77IVRrakURR6nxt67I6IleT53S0Ex2
// SIG // tVdUCbFpAUR+fKFhbHP+CrvsQWY9af3LwUFJfn6Tvsv4
// SIG // O+S3Fb+0zj6lMVGEvL8CwYKiexcdFYmNcP7ntdAoGokL
// SIG // jzbaukz5m/8K6TT4JDVnK+ANuOaMmdbhIurwJ0I9JZTm
// SIG // dHRbatGePu1+oDEzfbzL6Xu/OHBE0ZDxyKs6ijoIYn/Z
// SIG // cGNTTY3ugm2lBRDBcQZqELQdVTNYs6FwZvKhggLUMIIC
// SIG // PQIBATCCAQChgdikgdUwgdIxCzAJBgNVBAYTAlVTMRMw
// SIG // EQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRt
// SIG // b25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRp
// SIG // b24xLTArBgNVBAsTJE1pY3Jvc29mdCBJcmVsYW5kIE9w
// SIG // ZXJhdGlvbnMgTGltaXRlZDEmMCQGA1UECxMdVGhhbGVz
// SIG // IFRTUyBFU046MDg0Mi00QkU2LUMyOUExJTAjBgNVBAMT
// SIG // HE1pY3Jvc29mdCBUaW1lLVN0YW1wIFNlcnZpY2WiIwoB
// SIG // ATAHBgUrDgMCGgMVAEKiHyGJYx1GzaGNP8I4V0Z/7EgN
// SIG // oIGDMIGApH4wfDELMAkGA1UEBhMCVVMxEzARBgNVBAgT
// SIG // Cldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAc
// SIG // BgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEmMCQG
// SIG // A1UEAxMdTWljcm9zb2Z0IFRpbWUtU3RhbXAgUENBIDIw
// SIG // MTAwDQYJKoZIhvcNAQEFBQACBQDpRmodMCIYDzIwMjQw
// SIG // MTA4MjAzMzMzWhgPMjAyNDAxMDkyMDMzMzNaMHQwOgYK
// SIG // KwYBBAGEWQoEATEsMCowCgIFAOlGah0CAQAwBwIBAAIC
// SIG // CWEwBwIBAAICETYwCgIFAOlHu50CAQAwNgYKKwYBBAGE
// SIG // WQoEAjEoMCYwDAYKKwYBBAGEWQoDAqAKMAgCAQACAweh
// SIG // IKEKMAgCAQACAwGGoDANBgkqhkiG9w0BAQUFAAOBgQBG
// SIG // VsL91UXVqKESFH9wN8GwtIyynCfBBSc+0YzC44q86pV0
// SIG // 9BZQlirgofNTxwlNHhGhBfhVAs0GOwH5JcOz5ZI2Ff2t
// SIG // S3zeOVDnjfp/lyqQVBuo2bspzGfQNZehdaiMgU9GzqGk
// SIG // GRhKaCeH7icIxKYHLNi6Wy/2p+oQqGH4JvYmSTGCBA0w
// SIG // ggQJAgEBMIGTMHwxCzAJBgNVBAYTAlVTMRMwEQYDVQQI
// SIG // EwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4w
// SIG // HAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xJjAk
// SIG // BgNVBAMTHU1pY3Jvc29mdCBUaW1lLVN0YW1wIFBDQSAy
// SIG // MDEwAhMzAAAB2o7VyVoA0RGxAAEAAAHaMA0GCWCGSAFl
// SIG // AwQCAQUAoIIBSjAaBgkqhkiG9w0BCQMxDQYLKoZIhvcN
// SIG // AQkQAQQwLwYJKoZIhvcNAQkEMSIEIOGHTTFFPVYHKSqP
// SIG // BBVit9vxvd4ARziMYRS6iqrC1NS1MIH6BgsqhkiG9w0B
// SIG // CRACLzGB6jCB5zCB5DCBvQQgIqWjaWLA756k3veQ49Qt
// SIG // PdNtCOZY4m61v53SAjsYPcYwgZgwgYCkfjB8MQswCQYD
// SIG // VQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4G
// SIG // A1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0
// SIG // IENvcnBvcmF0aW9uMSYwJAYDVQQDEx1NaWNyb3NvZnQg
// SIG // VGltZS1TdGFtcCBQQ0EgMjAxMAITMwAAAdqO1claANER
// SIG // sQABAAAB2jAiBCDkWlDD9KciWKwLrezYO0g21M3iuPLo
// SIG // v1yiv1wcrsepLjANBgkqhkiG9w0BAQsFAASCAgCTETdF
// SIG // xwTCWGlzA+yaD9w2O1wrY9oi9coG4Xqo/BwRDgUAQ8hs
// SIG // a3fFZnA4uPstPwbY1zhnbvfuBEzeqYW5HA1m0as4GUa5
// SIG // N2Tlwj1JmHw95W8pwc4/3haGXksbBiG/RilSKR3XFHwp
// SIG // Hm4U0lepOoZ2RuZsFDne2fFMDLq8Sb1xbvgpgV+3PTMC
// SIG // Ppl2GawxolLKS86l+0yJzVz2xcEMUf1Slbl6E2fgNZvP
// SIG // ztlEbOA4FgqcxjKh97N6ElkCfhoXqnUhsEFtXJhtnPZt
// SIG // vCzs44G+mVCQ5+DQCdo8Q5GJfKlsqROIvOuXVuImxURz
// SIG // iUf2xAaryfdjk2W+sDTpj6VbV/ODfGh+oXRKNWFW38kc
// SIG // 4t9pbCgtrZzd8u5Xkdex+H1HIBb1nz9jRj+oDOn3nH2i
// SIG // NOckOFY8iNlEZogxV7n/4+vAq2IUrFR6EYzSHtEgA3lR
// SIG // 3CloGOl8Pn1aSQgUA6pGQ8fJGr0N1J6feTZ1hm4zaOV7
// SIG // XIK1h4w9Pa5pclO3kDkxbycEhuvlAINxEsg+vnpJqS/C
// SIG // IsXuuy0Zk+BuZ7MbFlZJPc4FB5mJpI75X2gQ+Ve7U+7u
// SIG // Cy+63KmEzUZc/+u5YwW2cf/I+Azx7ddtAi8uo4BeWdlh
// SIG // x05ET6svDDJM2PvpCU1a0vbeV/YWxF93qZA41nnHohIv
// SIG // ggl/m70u96jTcnM1Zg==
// SIG // End signature block
