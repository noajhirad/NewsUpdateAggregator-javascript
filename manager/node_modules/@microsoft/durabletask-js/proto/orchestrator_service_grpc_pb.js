// GENERATED CODE -- DO NOT EDIT!

// Original file comments:
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
//
'use strict';
var grpc = require('@grpc/grpc-js');
var orchestrator_service_pb = require('./orchestrator_service_pb.js');
var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
var google_protobuf_wrappers_pb = require('google-protobuf/google/protobuf/wrappers_pb.js');
var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');

function serialize_ActivityResponse(arg) {
  if (!(arg instanceof orchestrator_service_pb.ActivityResponse)) {
    throw new Error('Expected argument of type ActivityResponse');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_ActivityResponse(buffer_arg) {
  return orchestrator_service_pb.ActivityResponse.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_CompleteTaskResponse(arg) {
  if (!(arg instanceof orchestrator_service_pb.CompleteTaskResponse)) {
    throw new Error('Expected argument of type CompleteTaskResponse');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_CompleteTaskResponse(buffer_arg) {
  return orchestrator_service_pb.CompleteTaskResponse.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_CreateInstanceRequest(arg) {
  if (!(arg instanceof orchestrator_service_pb.CreateInstanceRequest)) {
    throw new Error('Expected argument of type CreateInstanceRequest');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_CreateInstanceRequest(buffer_arg) {
  return orchestrator_service_pb.CreateInstanceRequest.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_CreateInstanceResponse(arg) {
  if (!(arg instanceof orchestrator_service_pb.CreateInstanceResponse)) {
    throw new Error('Expected argument of type CreateInstanceResponse');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_CreateInstanceResponse(buffer_arg) {
  return orchestrator_service_pb.CreateInstanceResponse.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_CreateTaskHubRequest(arg) {
  if (!(arg instanceof orchestrator_service_pb.CreateTaskHubRequest)) {
    throw new Error('Expected argument of type CreateTaskHubRequest');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_CreateTaskHubRequest(buffer_arg) {
  return orchestrator_service_pb.CreateTaskHubRequest.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_CreateTaskHubResponse(arg) {
  if (!(arg instanceof orchestrator_service_pb.CreateTaskHubResponse)) {
    throw new Error('Expected argument of type CreateTaskHubResponse');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_CreateTaskHubResponse(buffer_arg) {
  return orchestrator_service_pb.CreateTaskHubResponse.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_DeleteTaskHubRequest(arg) {
  if (!(arg instanceof orchestrator_service_pb.DeleteTaskHubRequest)) {
    throw new Error('Expected argument of type DeleteTaskHubRequest');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_DeleteTaskHubRequest(buffer_arg) {
  return orchestrator_service_pb.DeleteTaskHubRequest.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_DeleteTaskHubResponse(arg) {
  if (!(arg instanceof orchestrator_service_pb.DeleteTaskHubResponse)) {
    throw new Error('Expected argument of type DeleteTaskHubResponse');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_DeleteTaskHubResponse(buffer_arg) {
  return orchestrator_service_pb.DeleteTaskHubResponse.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_GetInstanceRequest(arg) {
  if (!(arg instanceof orchestrator_service_pb.GetInstanceRequest)) {
    throw new Error('Expected argument of type GetInstanceRequest');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_GetInstanceRequest(buffer_arg) {
  return orchestrator_service_pb.GetInstanceRequest.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_GetInstanceResponse(arg) {
  if (!(arg instanceof orchestrator_service_pb.GetInstanceResponse)) {
    throw new Error('Expected argument of type GetInstanceResponse');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_GetInstanceResponse(buffer_arg) {
  return orchestrator_service_pb.GetInstanceResponse.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_GetWorkItemsRequest(arg) {
  if (!(arg instanceof orchestrator_service_pb.GetWorkItemsRequest)) {
    throw new Error('Expected argument of type GetWorkItemsRequest');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_GetWorkItemsRequest(buffer_arg) {
  return orchestrator_service_pb.GetWorkItemsRequest.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_OrchestratorResponse(arg) {
  if (!(arg instanceof orchestrator_service_pb.OrchestratorResponse)) {
    throw new Error('Expected argument of type OrchestratorResponse');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_OrchestratorResponse(buffer_arg) {
  return orchestrator_service_pb.OrchestratorResponse.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_PurgeInstancesRequest(arg) {
  if (!(arg instanceof orchestrator_service_pb.PurgeInstancesRequest)) {
    throw new Error('Expected argument of type PurgeInstancesRequest');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_PurgeInstancesRequest(buffer_arg) {
  return orchestrator_service_pb.PurgeInstancesRequest.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_PurgeInstancesResponse(arg) {
  if (!(arg instanceof orchestrator_service_pb.PurgeInstancesResponse)) {
    throw new Error('Expected argument of type PurgeInstancesResponse');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_PurgeInstancesResponse(buffer_arg) {
  return orchestrator_service_pb.PurgeInstancesResponse.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_QueryInstancesRequest(arg) {
  if (!(arg instanceof orchestrator_service_pb.QueryInstancesRequest)) {
    throw new Error('Expected argument of type QueryInstancesRequest');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_QueryInstancesRequest(buffer_arg) {
  return orchestrator_service_pb.QueryInstancesRequest.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_QueryInstancesResponse(arg) {
  if (!(arg instanceof orchestrator_service_pb.QueryInstancesResponse)) {
    throw new Error('Expected argument of type QueryInstancesResponse');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_QueryInstancesResponse(buffer_arg) {
  return orchestrator_service_pb.QueryInstancesResponse.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_RaiseEventRequest(arg) {
  if (!(arg instanceof orchestrator_service_pb.RaiseEventRequest)) {
    throw new Error('Expected argument of type RaiseEventRequest');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_RaiseEventRequest(buffer_arg) {
  return orchestrator_service_pb.RaiseEventRequest.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_RaiseEventResponse(arg) {
  if (!(arg instanceof orchestrator_service_pb.RaiseEventResponse)) {
    throw new Error('Expected argument of type RaiseEventResponse');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_RaiseEventResponse(buffer_arg) {
  return orchestrator_service_pb.RaiseEventResponse.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_ResumeRequest(arg) {
  if (!(arg instanceof orchestrator_service_pb.ResumeRequest)) {
    throw new Error('Expected argument of type ResumeRequest');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_ResumeRequest(buffer_arg) {
  return orchestrator_service_pb.ResumeRequest.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_ResumeResponse(arg) {
  if (!(arg instanceof orchestrator_service_pb.ResumeResponse)) {
    throw new Error('Expected argument of type ResumeResponse');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_ResumeResponse(buffer_arg) {
  return orchestrator_service_pb.ResumeResponse.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_RewindInstanceRequest(arg) {
  if (!(arg instanceof orchestrator_service_pb.RewindInstanceRequest)) {
    throw new Error('Expected argument of type RewindInstanceRequest');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_RewindInstanceRequest(buffer_arg) {
  return orchestrator_service_pb.RewindInstanceRequest.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_RewindInstanceResponse(arg) {
  if (!(arg instanceof orchestrator_service_pb.RewindInstanceResponse)) {
    throw new Error('Expected argument of type RewindInstanceResponse');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_RewindInstanceResponse(buffer_arg) {
  return orchestrator_service_pb.RewindInstanceResponse.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_SuspendRequest(arg) {
  if (!(arg instanceof orchestrator_service_pb.SuspendRequest)) {
    throw new Error('Expected argument of type SuspendRequest');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_SuspendRequest(buffer_arg) {
  return orchestrator_service_pb.SuspendRequest.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_SuspendResponse(arg) {
  if (!(arg instanceof orchestrator_service_pb.SuspendResponse)) {
    throw new Error('Expected argument of type SuspendResponse');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_SuspendResponse(buffer_arg) {
  return orchestrator_service_pb.SuspendResponse.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_TerminateRequest(arg) {
  if (!(arg instanceof orchestrator_service_pb.TerminateRequest)) {
    throw new Error('Expected argument of type TerminateRequest');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_TerminateRequest(buffer_arg) {
  return orchestrator_service_pb.TerminateRequest.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_TerminateResponse(arg) {
  if (!(arg instanceof orchestrator_service_pb.TerminateResponse)) {
    throw new Error('Expected argument of type TerminateResponse');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_TerminateResponse(buffer_arg) {
  return orchestrator_service_pb.TerminateResponse.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_WorkItem(arg) {
  if (!(arg instanceof orchestrator_service_pb.WorkItem)) {
    throw new Error('Expected argument of type WorkItem');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_WorkItem(buffer_arg) {
  return orchestrator_service_pb.WorkItem.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_google_protobuf_Empty(arg) {
  if (!(arg instanceof google_protobuf_empty_pb.Empty)) {
    throw new Error('Expected argument of type google.protobuf.Empty');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_google_protobuf_Empty(buffer_arg) {
  return google_protobuf_empty_pb.Empty.deserializeBinary(new Uint8Array(buffer_arg));
}


var TaskHubSidecarServiceService = exports.TaskHubSidecarServiceService = {
  // Sends a hello request to the sidecar service.
hello: {
    path: '/TaskHubSidecarService/Hello',
    requestStream: false,
    responseStream: false,
    requestType: google_protobuf_empty_pb.Empty,
    responseType: google_protobuf_empty_pb.Empty,
    requestSerialize: serialize_google_protobuf_Empty,
    requestDeserialize: deserialize_google_protobuf_Empty,
    responseSerialize: serialize_google_protobuf_Empty,
    responseDeserialize: deserialize_google_protobuf_Empty,
  },
  // Starts a new orchestration instance.
startInstance: {
    path: '/TaskHubSidecarService/StartInstance',
    requestStream: false,
    responseStream: false,
    requestType: orchestrator_service_pb.CreateInstanceRequest,
    responseType: orchestrator_service_pb.CreateInstanceResponse,
    requestSerialize: serialize_CreateInstanceRequest,
    requestDeserialize: deserialize_CreateInstanceRequest,
    responseSerialize: serialize_CreateInstanceResponse,
    responseDeserialize: deserialize_CreateInstanceResponse,
  },
  // Gets the status of an existing orchestration instance.
getInstance: {
    path: '/TaskHubSidecarService/GetInstance',
    requestStream: false,
    responseStream: false,
    requestType: orchestrator_service_pb.GetInstanceRequest,
    responseType: orchestrator_service_pb.GetInstanceResponse,
    requestSerialize: serialize_GetInstanceRequest,
    requestDeserialize: deserialize_GetInstanceRequest,
    responseSerialize: serialize_GetInstanceResponse,
    responseDeserialize: deserialize_GetInstanceResponse,
  },
  // Rewinds an orchestration instance to last known good state and replays from there.
rewindInstance: {
    path: '/TaskHubSidecarService/RewindInstance',
    requestStream: false,
    responseStream: false,
    requestType: orchestrator_service_pb.RewindInstanceRequest,
    responseType: orchestrator_service_pb.RewindInstanceResponse,
    requestSerialize: serialize_RewindInstanceRequest,
    requestDeserialize: deserialize_RewindInstanceRequest,
    responseSerialize: serialize_RewindInstanceResponse,
    responseDeserialize: deserialize_RewindInstanceResponse,
  },
  // Waits for an orchestration instance to reach a running or completion state.
waitForInstanceStart: {
    path: '/TaskHubSidecarService/WaitForInstanceStart',
    requestStream: false,
    responseStream: false,
    requestType: orchestrator_service_pb.GetInstanceRequest,
    responseType: orchestrator_service_pb.GetInstanceResponse,
    requestSerialize: serialize_GetInstanceRequest,
    requestDeserialize: deserialize_GetInstanceRequest,
    responseSerialize: serialize_GetInstanceResponse,
    responseDeserialize: deserialize_GetInstanceResponse,
  },
  // Waits for an orchestration instance to reach a completion state (completed, failed, terminated, etc.).
waitForInstanceCompletion: {
    path: '/TaskHubSidecarService/WaitForInstanceCompletion',
    requestStream: false,
    responseStream: false,
    requestType: orchestrator_service_pb.GetInstanceRequest,
    responseType: orchestrator_service_pb.GetInstanceResponse,
    requestSerialize: serialize_GetInstanceRequest,
    requestDeserialize: deserialize_GetInstanceRequest,
    responseSerialize: serialize_GetInstanceResponse,
    responseDeserialize: deserialize_GetInstanceResponse,
  },
  // Raises an event to a running orchestration instance.
raiseEvent: {
    path: '/TaskHubSidecarService/RaiseEvent',
    requestStream: false,
    responseStream: false,
    requestType: orchestrator_service_pb.RaiseEventRequest,
    responseType: orchestrator_service_pb.RaiseEventResponse,
    requestSerialize: serialize_RaiseEventRequest,
    requestDeserialize: deserialize_RaiseEventRequest,
    responseSerialize: serialize_RaiseEventResponse,
    responseDeserialize: deserialize_RaiseEventResponse,
  },
  // Terminates a running orchestration instance.
terminateInstance: {
    path: '/TaskHubSidecarService/TerminateInstance',
    requestStream: false,
    responseStream: false,
    requestType: orchestrator_service_pb.TerminateRequest,
    responseType: orchestrator_service_pb.TerminateResponse,
    requestSerialize: serialize_TerminateRequest,
    requestDeserialize: deserialize_TerminateRequest,
    responseSerialize: serialize_TerminateResponse,
    responseDeserialize: deserialize_TerminateResponse,
  },
  // Suspends a running orchestration instance.
suspendInstance: {
    path: '/TaskHubSidecarService/SuspendInstance',
    requestStream: false,
    responseStream: false,
    requestType: orchestrator_service_pb.SuspendRequest,
    responseType: orchestrator_service_pb.SuspendResponse,
    requestSerialize: serialize_SuspendRequest,
    requestDeserialize: deserialize_SuspendRequest,
    responseSerialize: serialize_SuspendResponse,
    responseDeserialize: deserialize_SuspendResponse,
  },
  // Resumes a suspended orchestration instance.
resumeInstance: {
    path: '/TaskHubSidecarService/ResumeInstance',
    requestStream: false,
    responseStream: false,
    requestType: orchestrator_service_pb.ResumeRequest,
    responseType: orchestrator_service_pb.ResumeResponse,
    requestSerialize: serialize_ResumeRequest,
    requestDeserialize: deserialize_ResumeRequest,
    responseSerialize: serialize_ResumeResponse,
    responseDeserialize: deserialize_ResumeResponse,
  },
  // rpc DeleteInstance(DeleteInstanceRequest) returns (DeleteInstanceResponse);
//
queryInstances: {
    path: '/TaskHubSidecarService/QueryInstances',
    requestStream: false,
    responseStream: false,
    requestType: orchestrator_service_pb.QueryInstancesRequest,
    responseType: orchestrator_service_pb.QueryInstancesResponse,
    requestSerialize: serialize_QueryInstancesRequest,
    requestDeserialize: deserialize_QueryInstancesRequest,
    responseSerialize: serialize_QueryInstancesResponse,
    responseDeserialize: deserialize_QueryInstancesResponse,
  },
  purgeInstances: {
    path: '/TaskHubSidecarService/PurgeInstances',
    requestStream: false,
    responseStream: false,
    requestType: orchestrator_service_pb.PurgeInstancesRequest,
    responseType: orchestrator_service_pb.PurgeInstancesResponse,
    requestSerialize: serialize_PurgeInstancesRequest,
    requestDeserialize: deserialize_PurgeInstancesRequest,
    responseSerialize: serialize_PurgeInstancesResponse,
    responseDeserialize: deserialize_PurgeInstancesResponse,
  },
  getWorkItems: {
    path: '/TaskHubSidecarService/GetWorkItems',
    requestStream: false,
    responseStream: true,
    requestType: orchestrator_service_pb.GetWorkItemsRequest,
    responseType: orchestrator_service_pb.WorkItem,
    requestSerialize: serialize_GetWorkItemsRequest,
    requestDeserialize: deserialize_GetWorkItemsRequest,
    responseSerialize: serialize_WorkItem,
    responseDeserialize: deserialize_WorkItem,
  },
  completeActivityTask: {
    path: '/TaskHubSidecarService/CompleteActivityTask',
    requestStream: false,
    responseStream: false,
    requestType: orchestrator_service_pb.ActivityResponse,
    responseType: orchestrator_service_pb.CompleteTaskResponse,
    requestSerialize: serialize_ActivityResponse,
    requestDeserialize: deserialize_ActivityResponse,
    responseSerialize: serialize_CompleteTaskResponse,
    responseDeserialize: deserialize_CompleteTaskResponse,
  },
  completeOrchestratorTask: {
    path: '/TaskHubSidecarService/CompleteOrchestratorTask',
    requestStream: false,
    responseStream: false,
    requestType: orchestrator_service_pb.OrchestratorResponse,
    responseType: orchestrator_service_pb.CompleteTaskResponse,
    requestSerialize: serialize_OrchestratorResponse,
    requestDeserialize: deserialize_OrchestratorResponse,
    responseSerialize: serialize_CompleteTaskResponse,
    responseDeserialize: deserialize_CompleteTaskResponse,
  },
  // Deletes and Creates the necessary resources for the orchestration service and the instance store
createTaskHub: {
    path: '/TaskHubSidecarService/CreateTaskHub',
    requestStream: false,
    responseStream: false,
    requestType: orchestrator_service_pb.CreateTaskHubRequest,
    responseType: orchestrator_service_pb.CreateTaskHubResponse,
    requestSerialize: serialize_CreateTaskHubRequest,
    requestDeserialize: deserialize_CreateTaskHubRequest,
    responseSerialize: serialize_CreateTaskHubResponse,
    responseDeserialize: deserialize_CreateTaskHubResponse,
  },
  // Deletes the resources for the orchestration service and optionally the instance store
deleteTaskHub: {
    path: '/TaskHubSidecarService/DeleteTaskHub',
    requestStream: false,
    responseStream: false,
    requestType: orchestrator_service_pb.DeleteTaskHubRequest,
    responseType: orchestrator_service_pb.DeleteTaskHubResponse,
    requestSerialize: serialize_DeleteTaskHubRequest,
    requestDeserialize: deserialize_DeleteTaskHubRequest,
    responseSerialize: serialize_DeleteTaskHubResponse,
    responseDeserialize: deserialize_DeleteTaskHubResponse,
  },
};

exports.TaskHubSidecarServiceClient = grpc.makeGenericClientConstructor(TaskHubSidecarServiceService);

// SIG // Begin signature block
// SIG // MIIoKAYJKoZIhvcNAQcCoIIoGTCCKBUCAQExDzANBglg
// SIG // hkgBZQMEAgEFADB3BgorBgEEAYI3AgEEoGkwZzAyBgor
// SIG // BgEEAYI3AgEeMCQCAQEEEBDgyQbOONQRoqMAEEvTUJAC
// SIG // AQACAQACAQACAQACAQAwMTANBglghkgBZQMEAgEFAAQg
// SIG // Cvl7agJ3pXXpi/Dg52Z6m3AenqsSBrSkpOcYzOif232g
// SIG // gg12MIIF9DCCA9ygAwIBAgITMwAAA68wQA5Mo00FQQAA
// SIG // AAADrzANBgkqhkiG9w0BAQsFADB+MQswCQYDVQQGEwJV
// SIG // UzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMH
// SIG // UmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBv
// SIG // cmF0aW9uMSgwJgYDVQQDEx9NaWNyb3NvZnQgQ29kZSBT
// SIG // aWduaW5nIFBDQSAyMDExMB4XDTIzMTExNjE5MDkwMFoX
// SIG // DTI0MTExNDE5MDkwMFowdDELMAkGA1UEBhMCVVMxEzAR
// SIG // BgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1v
// SIG // bmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlv
// SIG // bjEeMBwGA1UEAxMVTWljcm9zb2Z0IENvcnBvcmF0aW9u
// SIG // MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA
// SIG // zkvLNa2un9GBrYNDoRGkGv7d0PqtTBB4ViYakFbjuWpm
// SIG // F0KcvDAzzaCWJPhVgIXjz+S8cHEoHuWnp/n+UOljT3eh
// SIG // A8Rs6Lb1aTYub3tB/e0txewv2sQ3yscjYdtTBtFvEm9L
// SIG // 8Yv76K3Cxzi/Yvrdg+sr7w8y5RHn1Am0Ff8xggY1xpWC
// SIG // XFI+kQM18njQDcUqSlwBnexYfqHBhzz6YXA/S0EziYBu
// SIG // 2O2mM7R6gSyYkEOHgIGTVOGnOvvC5xBgC4KNcnQuQSRL
// SIG // iUI2CmzU8vefR6ykruyzt1rNMPI8OqWHQtSDKXU5JNqb
// SIG // k4GNjwzcwbSzOHrxuxWHq91l/vLdVDGDUwIDAQABo4IB
// SIG // czCCAW8wHwYDVR0lBBgwFgYKKwYBBAGCN0wIAQYIKwYB
// SIG // BQUHAwMwHQYDVR0OBBYEFEcccTTyBDxkjvJKs/m4AgEF
// SIG // hl7BMEUGA1UdEQQ+MDykOjA4MR4wHAYDVQQLExVNaWNy
// SIG // b3NvZnQgQ29ycG9yYXRpb24xFjAUBgNVBAUTDTIzMDAx
// SIG // Mis1MDE4MjYwHwYDVR0jBBgwFoAUSG5k5VAF04KqFzc3
// SIG // IrVtqMp1ApUwVAYDVR0fBE0wSzBJoEegRYZDaHR0cDov
// SIG // L3d3dy5taWNyb3NvZnQuY29tL3BraW9wcy9jcmwvTWlj
// SIG // Q29kU2lnUENBMjAxMV8yMDExLTA3LTA4LmNybDBhBggr
// SIG // BgEFBQcBAQRVMFMwUQYIKwYBBQUHMAKGRWh0dHA6Ly93
// SIG // d3cubWljcm9zb2Z0LmNvbS9wa2lvcHMvY2VydHMvTWlj
// SIG // Q29kU2lnUENBMjAxMV8yMDExLTA3LTA4LmNydDAMBgNV
// SIG // HRMBAf8EAjAAMA0GCSqGSIb3DQEBCwUAA4ICAQCEsRbf
// SIG // 80dn60xTweOWHZoWaQdpzSaDqIvqpYHE5ZzuEMJWDdcP
// SIG // 72MGw8v6BSaJQ+a+hTCXdERnIBDPKvU4ENjgu4EBJocH
// SIG // lSe8riiZUAR+z+z4OUYqoFd3EqJyfjjOJBR2z94Dy4ss
// SIG // 7LEkHUbj2NZiFqBoPYu2OGQvEk+1oaUsnNKZ7Nl7FHtV
// SIG // 7CI2lHBru83e4IPe3glIi0XVZJT5qV6Gx/QhAFmpEVBj
// SIG // SAmDdgII4UUwuI9yiX6jJFNOEek6MoeP06LMJtbqA3Bq
// SIG // +ZWmJ033F97uVpyaiS4bj3vFI/ZBgDnMqNDtZjcA2vi4
// SIG // RRMweggd9vsHyTLpn6+nXoLy03vMeebq0C3k44pgUIEu
// SIG // PQUlJIRTe6IrN3GcjaZ6zHGuQGWgu6SyO9r7qkrEpS2p
// SIG // RjnGZjx2RmCamdAWnDdu+DmfNEPAddYjaJJ7PTnd+PGz
// SIG // G+WeH4ocWgVnm5fJFhItjj70CJjgHqt57e1FiQcyWCwB
// SIG // hKX2rGgN2UICHBF3Q/rsKOspjMw2OlGphTn2KmFl5J7c
// SIG // Qxru54A9roClLnHGCiSUYos/iwFHI/dAVXEh0S0KKfTf
// SIG // M6AC6/9bCbsD61QLcRzRIElvgCgaiMWFjOBL99pemoEl
// SIG // AHsyzG6uX93fMfas09N9YzA0/rFAKAsNDOcFbQlEHKiD
// SIG // T7mI20tVoCcmSIhJATCCB3owggVioAMCAQICCmEOkNIA
// SIG // AAAAAAMwDQYJKoZIhvcNAQELBQAwgYgxCzAJBgNVBAYT
// SIG // AlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQH
// SIG // EwdSZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29y
// SIG // cG9yYXRpb24xMjAwBgNVBAMTKU1pY3Jvc29mdCBSb290
// SIG // IENlcnRpZmljYXRlIEF1dGhvcml0eSAyMDExMB4XDTEx
// SIG // MDcwODIwNTkwOVoXDTI2MDcwODIxMDkwOVowfjELMAkG
// SIG // A1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAO
// SIG // BgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29m
// SIG // dCBDb3Jwb3JhdGlvbjEoMCYGA1UEAxMfTWljcm9zb2Z0
// SIG // IENvZGUgU2lnbmluZyBQQ0EgMjAxMTCCAiIwDQYJKoZI
// SIG // hvcNAQEBBQADggIPADCCAgoCggIBAKvw+nIQHC6t2G6q
// SIG // ghBNNLrytlghn0IbKmvpWlCquAY4GgRJun/DDB7dN2vG
// SIG // EtgL8DjCmQawyDnVARQxQtOJDXlkh36UYCRsr55JnOlo
// SIG // XtLfm1OyCizDr9mpK656Ca/XllnKYBoF6WZ26DJSJhIv
// SIG // 56sIUM+zRLdd2MQuA3WraPPLbfM6XKEW9Ea64DhkrG5k
// SIG // NXimoGMPLdNAk/jj3gcN1Vx5pUkp5w2+oBN3vpQ97/vj
// SIG // K1oQH01WKKJ6cuASOrdJXtjt7UORg9l7snuGG9k+sYxd
// SIG // 6IlPhBryoS9Z5JA7La4zWMW3Pv4y07MDPbGyr5I4ftKd
// SIG // gCz1TlaRITUlwzluZH9TupwPrRkjhMv0ugOGjfdf8NBS
// SIG // v4yUh7zAIXQlXxgotswnKDglmDlKNs98sZKuHCOnqWbs
// SIG // YR9q4ShJnV+I4iVd0yFLPlLEtVc/JAPw0XpbL9Uj43Bd
// SIG // D1FGd7P4AOG8rAKCX9vAFbO9G9RVS+c5oQ/pI0m8GLhE
// SIG // fEXkwcNyeuBy5yTfv0aZxe/CHFfbg43sTUkwp6uO3+xb
// SIG // n6/83bBm4sGXgXvt1u1L50kppxMopqd9Z4DmimJ4X7Iv
// SIG // hNdXnFy/dygo8e1twyiPLI9AN0/B4YVEicQJTMXUpUMv
// SIG // dJX3bvh4IFgsE11glZo+TzOE2rCIF96eTvSWsLxGoGyY
// SIG // 0uDWiIwLAgMBAAGjggHtMIIB6TAQBgkrBgEEAYI3FQEE
// SIG // AwIBADAdBgNVHQ4EFgQUSG5k5VAF04KqFzc3IrVtqMp1
// SIG // ApUwGQYJKwYBBAGCNxQCBAweCgBTAHUAYgBDAEEwCwYD
// SIG // VR0PBAQDAgGGMA8GA1UdEwEB/wQFMAMBAf8wHwYDVR0j
// SIG // BBgwFoAUci06AjGQQ7kUBU7h6qfHMdEjiTQwWgYDVR0f
// SIG // BFMwUTBPoE2gS4ZJaHR0cDovL2NybC5taWNyb3NvZnQu
// SIG // Y29tL3BraS9jcmwvcHJvZHVjdHMvTWljUm9vQ2VyQXV0
// SIG // MjAxMV8yMDExXzAzXzIyLmNybDBeBggrBgEFBQcBAQRS
// SIG // MFAwTgYIKwYBBQUHMAKGQmh0dHA6Ly93d3cubWljcm9z
// SIG // b2Z0LmNvbS9wa2kvY2VydHMvTWljUm9vQ2VyQXV0MjAx
// SIG // MV8yMDExXzAzXzIyLmNydDCBnwYDVR0gBIGXMIGUMIGR
// SIG // BgkrBgEEAYI3LgMwgYMwPwYIKwYBBQUHAgEWM2h0dHA6
// SIG // Ly93d3cubWljcm9zb2Z0LmNvbS9wa2lvcHMvZG9jcy9w
// SIG // cmltYXJ5Y3BzLmh0bTBABggrBgEFBQcCAjA0HjIgHQBM
// SIG // AGUAZwBhAGwAXwBwAG8AbABpAGMAeQBfAHMAdABhAHQA
// SIG // ZQBtAGUAbgB0AC4gHTANBgkqhkiG9w0BAQsFAAOCAgEA
// SIG // Z/KGpZjgVHkaLtPYdGcimwuWEeFjkplCln3SeQyQwWVf
// SIG // Liw++MNy0W2D/r4/6ArKO79HqaPzadtjvyI1pZddZYSQ
// SIG // fYtGUFXYDJJ80hpLHPM8QotS0LD9a+M+By4pm+Y9G6XU
// SIG // tR13lDni6WTJRD14eiPzE32mkHSDjfTLJgJGKsKKELuk
// SIG // qQUMm+1o+mgulaAqPyprWEljHwlpblqYluSD9MCP80Yr
// SIG // 3vw70L01724lruWvJ+3Q3fMOr5kol5hNDj0L8giJ1h/D
// SIG // Mhji8MUtzluetEk5CsYKwsatruWy2dsViFFFWDgycSca
// SIG // f7H0J/jeLDogaZiyWYlobm+nt3TDQAUGpgEqKD6CPxNN
// SIG // ZgvAs0314Y9/HG8VfUWnduVAKmWjw11SYobDHWM2l4bf
// SIG // 2vP48hahmifhzaWX0O5dY0HjWwechz4GdwbRBrF1HxS+
// SIG // YWG18NzGGwS+30HHDiju3mUv7Jf2oVyW2ADWoUa9WfOX
// SIG // pQlLSBCZgB/QACnFsZulP0V3HjXG0qKin3p6IvpIlR+r
// SIG // +0cjgPWe+L9rt0uX4ut1eBrs6jeZeRhL/9azI2h15q/6
// SIG // /IvrC4DqaTuv/DDtBEyO3991bWORPdGdVk5Pv4BXIqF4
// SIG // ETIheu9BCrE/+6jMpF3BoYibV3FWTkhFwELJm3ZbCoBI
// SIG // a/15n8G9bW1qyVJzEw16UM0xghoKMIIaBgIBATCBlTB+
// SIG // MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3Rv
// SIG // bjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWlj
// SIG // cm9zb2Z0IENvcnBvcmF0aW9uMSgwJgYDVQQDEx9NaWNy
// SIG // b3NvZnQgQ29kZSBTaWduaW5nIFBDQSAyMDExAhMzAAAD
// SIG // rzBADkyjTQVBAAAAAAOvMA0GCWCGSAFlAwQCAQUAoIGu
// SIG // MBkGCSqGSIb3DQEJAzEMBgorBgEEAYI3AgEEMBwGCisG
// SIG // AQQBgjcCAQsxDjAMBgorBgEEAYI3AgEVMC8GCSqGSIb3
// SIG // DQEJBDEiBCB4HdHVV8QN13Np3jYcn4yphfCaOarYcTPy
// SIG // tdMB8+yHJDBCBgorBgEEAYI3AgEMMTQwMqAUgBIATQBp
// SIG // AGMAcgBvAHMAbwBmAHShGoAYaHR0cDovL3d3dy5taWNy
// SIG // b3NvZnQuY29tMA0GCSqGSIb3DQEBAQUABIIBADsFlLi6
// SIG // J0P37XqUYytlGixjgHASwUaOgUe2Z/OzrZadIvlPmDOv
// SIG // /ow1uW/K32VG0LL2yU4UouxuKTvtoJP6ZlMHhkC+iWeB
// SIG // LboXqiRFd/R0DqZPeEU8m/Lvw2FYA5j1QIsYKVNClaz3
// SIG // BbeYD9bVhmAVu/TwF5xZKthEvtYpnBuhz9YL5HOLT7fO
// SIG // UPYJhTSjqwIvjAJTF55gLMM1MTo7B8lX+1bpPntXLcDy
// SIG // jropYSPpzayD8vQD8w1l8xC3WlnpU5GVJYcRqticd7gj
// SIG // u+46vAlCJ+xTQVx173bXsM92w0IWx3EXqrh91l9Q+Y1H
// SIG // b10/gxmr9hJp7Hd5qF3/ojdDQa6hgheUMIIXkAYKKwYB
// SIG // BAGCNwMDATGCF4Awghd8BgkqhkiG9w0BBwKgghdtMIIX
// SIG // aQIBAzEPMA0GCWCGSAFlAwQCAQUAMIIBUgYLKoZIhvcN
// SIG // AQkQAQSgggFBBIIBPTCCATkCAQEGCisGAQQBhFkKAwEw
// SIG // MTANBglghkgBZQMEAgEFAAQg2yZaJua4gzJ47aYqhtqd
// SIG // mkiWaFZdt4IZlMsR/HPtcf8CBmV7BpEcEBgTMjAyNDAx
// SIG // MDgxODE1NDkuODAzWjAEgAIB9KCB0aSBzjCByzELMAkG
// SIG // A1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAO
// SIG // BgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29m
// SIG // dCBDb3Jwb3JhdGlvbjElMCMGA1UECxMcTWljcm9zb2Z0
// SIG // IEFtZXJpY2EgT3BlcmF0aW9uczEnMCUGA1UECxMeblNo
// SIG // aWVsZCBUU1MgRVNOOkRDMDAtMDVFMC1EOTQ3MSUwIwYD
// SIG // VQQDExxNaWNyb3NvZnQgVGltZS1TdGFtcCBTZXJ2aWNl
// SIG // oIIR6jCCByAwggUIoAMCAQICEzMAAAHSISQxSli/LREA
// SIG // AQAAAdIwDQYJKoZIhvcNAQELBQAwfDELMAkGA1UEBhMC
// SIG // VVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcT
// SIG // B1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jw
// SIG // b3JhdGlvbjEmMCQGA1UEAxMdTWljcm9zb2Z0IFRpbWUt
// SIG // U3RhbXAgUENBIDIwMTAwHhcNMjMwNTI1MTkxMjIxWhcN
// SIG // MjQwMjAxMTkxMjIxWjCByzELMAkGA1UEBhMCVVMxEzAR
// SIG // BgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1v
// SIG // bmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlv
// SIG // bjElMCMGA1UECxMcTWljcm9zb2Z0IEFtZXJpY2EgT3Bl
// SIG // cmF0aW9uczEnMCUGA1UECxMeblNoaWVsZCBUU1MgRVNO
// SIG // OkRDMDAtMDVFMC1EOTQ3MSUwIwYDVQQDExxNaWNyb3Nv
// SIG // ZnQgVGltZS1TdGFtcCBTZXJ2aWNlMIICIjANBgkqhkiG
// SIG // 9w0BAQEFAAOCAg8AMIICCgKCAgEA3GCIQtECP0j2k+fp
// SIG // 2EgbEnYQTztklzONFcsoPBatUz6zDQ88QocVlA+32ysG
// SIG // BkrDjYLY41XneR0oeYpe+YzWnG+k62cLl/kNvvn9v/Ag
// SIG // srvE2NK8RCJw904+dm1s+UEVlUHo33QgP5+mc4p4XGWe
// SIG // /lXpVoE32Au6w64V90wV/PXpal5iEjlSFnl4kSvIfYR+
// SIG // kl4I4UBhkG39m0jO7hpCsyf6Wdi75U86vpjlvYj9o3GB
// SIG // AOG6T3rq6YJS1VEpxhkC5o0Ke0nctcBOdlozynS5wRei
// SIG // W5kkRDPw4/We6JMUTVI2EnYMr2dS1kopYVf8HoGF1UOj
// SIG // /TCo0ZxPAiOSjB5quxLB4SAStAffXRUMnS9b3bgu3lhI
// SIG // 88+eWfw8h+h5dkjzn+SmeJR3+jFMLYGn/jHmcZFtIsYf
// SIG // 7y9Zl/FbCUx2vAB/tJf/XZ1sxTBRSRRu4PeZxyejJmD6
// SIG // 35qHijkaMhEEbErrNqgq6TI4Pz92fViQLRRqF2DA9fTa
// SIG // 8xuFBT6VW5dzdV7xuP7pXaNfmpwaQ2IcUFO5NYHx5+kM
// SIG // XVFNE7KyfyQry330vPW+FV5SGsZ1RekGYfie8S1DRrRJ
// SIG // o+ncD86Any+86g2Sb5rL2DZNZXG8lcTCIAxT6ANn2T1x
// SIG // xe3cWoTNmRuwALd72RIjLQuhP3Ii0XCMM5SawYhxHpyD
// SIG // 78VteasCAwEAAaOCAUkwggFFMB0GA1UdDgQWBBQgtp+3
// SIG // J0d06D/5GxGdlyRRZmdZJDAfBgNVHSMEGDAWgBSfpxVd
// SIG // AF5iXYP05dJlpxtTNRnpcjBfBgNVHR8EWDBWMFSgUqBQ
// SIG // hk5odHRwOi8vd3d3Lm1pY3Jvc29mdC5jb20vcGtpb3Bz
// SIG // L2NybC9NaWNyb3NvZnQlMjBUaW1lLVN0YW1wJTIwUENB
// SIG // JTIwMjAxMCgxKS5jcmwwbAYIKwYBBQUHAQEEYDBeMFwG
// SIG // CCsGAQUFBzAChlBodHRwOi8vd3d3Lm1pY3Jvc29mdC5j
// SIG // b20vcGtpb3BzL2NlcnRzL01pY3Jvc29mdCUyMFRpbWUt
// SIG // U3RhbXAlMjBQQ0ElMjAyMDEwKDEpLmNydDAMBgNVHRMB
// SIG // Af8EAjAAMBYGA1UdJQEB/wQMMAoGCCsGAQUFBwMIMA4G
// SIG // A1UdDwEB/wQEAwIHgDANBgkqhkiG9w0BAQsFAAOCAgEA
// SIG // sOYqtBMtC5QHc9j3KnIUcFuXfn4rTSEgr6g9BOlvwMok
// SIG // 5PkzN1oWE2sUNqT+jq+Kjlfg7u/y/pNfIGK9aYbIcVTF
// SIG // Z1zXHY3nDLU1lDlQMGyaHlh2gIJJzSDM1yt/s4LhuU1X
// SIG // CxIfwlTMtSeyjxPENAs+ejYFs3fbqxvrIUgypCnYTmD1
// SIG // xfe9DK9RghRaXtaF4xMumkvh3mr6dsJsuuZm7tAHFDjx
// SIG // J/oWKoo4C10j6r7hZjjqOVJ0leug7+RXZKiu6uQ0XqMf
// SIG // UTxGXB1GvtgVCj46fnUNw+HPSB/O9uyozA/Dl2aJg/QP
// SIG // DK/33A5+RSO5X2XPIIWHO7KWCkzv9GfWEUWpoVVscayL
// SIG // ATeS61oftfLKFyfvhHko80mHYBlmD4NeoS/+wMnceCs/
// SIG // 1gU1JmxoolVHBPyNGkFNlP9Dc1IiBSFvNEr8Xg1p+iPo
// SIG // clYP7HRUgCz+SU+8AHvM077KyNoTKRFS3UrRQDKmpxWK
// SIG // rcGVORaALKD2e4dRJVpii2ZF5PHj7gC87TWNcrHjtE8H
// SIG // bniBnCMCLa5QWINV6T89fqTIRjFW5Xuih7p2iqOSv5XT
// SIG // jNJkEE+FY4OmW80SFUaA3AK0Of/9PO+YzlLybWMnOx5d
// SIG // OI3Jr4xCFwtx45FGL4BxFi9EBf+H+7ywHIWhGfN/f9xm
// SIG // Dnah+VVZ2a1CAUAeg02lCCwwggdxMIIFWaADAgECAhMz
// SIG // AAAAFcXna54Cm0mZAAAAAAAVMA0GCSqGSIb3DQEBCwUA
// SIG // MIGIMQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGlu
// SIG // Z3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMV
// SIG // TWljcm9zb2Z0IENvcnBvcmF0aW9uMTIwMAYDVQQDEylN
// SIG // aWNyb3NvZnQgUm9vdCBDZXJ0aWZpY2F0ZSBBdXRob3Jp
// SIG // dHkgMjAxMDAeFw0yMTA5MzAxODIyMjVaFw0zMDA5MzAx
// SIG // ODMyMjVaMHwxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpX
// SIG // YXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYD
// SIG // VQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xJjAkBgNV
// SIG // BAMTHU1pY3Jvc29mdCBUaW1lLVN0YW1wIFBDQSAyMDEw
// SIG // MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEA
// SIG // 5OGmTOe0ciELeaLL1yR5vQ7VgtP97pwHB9KpbE51yMo1
// SIG // V/YBf2xK4OK9uT4XYDP/XE/HZveVU3Fa4n5KWv64NmeF
// SIG // RiMMtY0Tz3cywBAY6GB9alKDRLemjkZrBxTzxXb1hlDc
// SIG // wUTIcVxRMTegCjhuje3XD9gmU3w5YQJ6xKr9cmmvHaus
// SIG // 9ja+NSZk2pg7uhp7M62AW36MEBydUv626GIl3GoPz130
// SIG // /o5Tz9bshVZN7928jaTjkY+yOSxRnOlwaQ3KNi1wjjHI
// SIG // NSi947SHJMPgyY9+tVSP3PoFVZhtaDuaRr3tpK56KTes
// SIG // y+uDRedGbsoy1cCGMFxPLOJiss254o2I5JasAUq7vnGp
// SIG // F1tnYN74kpEeHT39IM9zfUGaRnXNxF803RKJ1v2lIH1+
// SIG // /NmeRd+2ci/bfV+AutuqfjbsNkz2K26oElHovwUDo9Fz
// SIG // pk03dJQcNIIP8BDyt0cY7afomXw/TNuvXsLz1dhzPUNO
// SIG // wTM5TI4CvEJoLhDqhFFG4tG9ahhaYQFzymeiXtcodgLi
// SIG // Mxhy16cg8ML6EgrXY28MyTZki1ugpoMhXV8wdJGUlNi5
// SIG // UPkLiWHzNgY1GIRH29wb0f2y1BzFa/ZcUlFdEtsluq9Q
// SIG // BXpsxREdcu+N+VLEhReTwDwV2xo3xwgVGD94q0W29R6H
// SIG // XtqPnhZyacaue7e3PmriLq0CAwEAAaOCAd0wggHZMBIG
// SIG // CSsGAQQBgjcVAQQFAgMBAAEwIwYJKwYBBAGCNxUCBBYE
// SIG // FCqnUv5kxJq+gpE8RjUpzxD/LwTuMB0GA1UdDgQWBBSf
// SIG // pxVdAF5iXYP05dJlpxtTNRnpcjBcBgNVHSAEVTBTMFEG
// SIG // DCsGAQQBgjdMg30BATBBMD8GCCsGAQUFBwIBFjNodHRw
// SIG // Oi8vd3d3Lm1pY3Jvc29mdC5jb20vcGtpb3BzL0RvY3Mv
// SIG // UmVwb3NpdG9yeS5odG0wEwYDVR0lBAwwCgYIKwYBBQUH
// SIG // AwgwGQYJKwYBBAGCNxQCBAweCgBTAHUAYgBDAEEwCwYD
// SIG // VR0PBAQDAgGGMA8GA1UdEwEB/wQFMAMBAf8wHwYDVR0j
// SIG // BBgwFoAU1fZWy4/oolxiaNE9lJBb186aGMQwVgYDVR0f
// SIG // BE8wTTBLoEmgR4ZFaHR0cDovL2NybC5taWNyb3NvZnQu
// SIG // Y29tL3BraS9jcmwvcHJvZHVjdHMvTWljUm9vQ2VyQXV0
// SIG // XzIwMTAtMDYtMjMuY3JsMFoGCCsGAQUFBwEBBE4wTDBK
// SIG // BggrBgEFBQcwAoY+aHR0cDovL3d3dy5taWNyb3NvZnQu
// SIG // Y29tL3BraS9jZXJ0cy9NaWNSb29DZXJBdXRfMjAxMC0w
// SIG // Ni0yMy5jcnQwDQYJKoZIhvcNAQELBQADggIBAJ1Vffwq
// SIG // reEsH2cBMSRb4Z5yS/ypb+pcFLY+TkdkeLEGk5c9MTO1
// SIG // OdfCcTY/2mRsfNB1OW27DzHkwo/7bNGhlBgi7ulmZzpT
// SIG // Td2YurYeeNg2LpypglYAA7AFvonoaeC6Ce5732pvvinL
// SIG // btg/SHUB2RjebYIM9W0jVOR4U3UkV7ndn/OOPcbzaN9l
// SIG // 9qRWqveVtihVJ9AkvUCgvxm2EhIRXT0n4ECWOKz3+SmJ
// SIG // w7wXsFSFQrP8DJ6LGYnn8AtqgcKBGUIZUnWKNsIdw2Fz
// SIG // Lixre24/LAl4FOmRsqlb30mjdAy87JGA0j3mSj5mO0+7
// SIG // hvoyGtmW9I/2kQH2zsZ0/fZMcm8Qq3UwxTSwethQ/gpY
// SIG // 3UA8x1RtnWN0SCyxTkctwRQEcb9k+SS+c23Kjgm9swFX
// SIG // SVRk2XPXfx5bRAGOWhmRaw2fpCjcZxkoJLo4S5pu+yFU
// SIG // a2pFEUep8beuyOiJXk+d0tBMdrVXVAmxaQFEfnyhYWxz
// SIG // /gq77EFmPWn9y8FBSX5+k77L+DvktxW/tM4+pTFRhLy/
// SIG // AsGConsXHRWJjXD+57XQKBqJC4822rpM+Zv/Cuk0+CQ1
// SIG // ZyvgDbjmjJnW4SLq8CdCPSWU5nR0W2rRnj7tfqAxM328
// SIG // y+l7vzhwRNGQ8cirOoo6CGJ/2XBjU02N7oJtpQUQwXEG
// SIG // ahC0HVUzWLOhcGbyoYIDTTCCAjUCAQEwgfmhgdGkgc4w
// SIG // gcsxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5n
// SIG // dG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVN
// SIG // aWNyb3NvZnQgQ29ycG9yYXRpb24xJTAjBgNVBAsTHE1p
// SIG // Y3Jvc29mdCBBbWVyaWNhIE9wZXJhdGlvbnMxJzAlBgNV
// SIG // BAsTHm5TaGllbGQgVFNTIEVTTjpEQzAwLTA1RTAtRDk0
// SIG // NzElMCMGA1UEAxMcTWljcm9zb2Z0IFRpbWUtU3RhbXAg
// SIG // U2VydmljZaIjCgEBMAcGBSsOAwIaAxUAiabSwmbBNOjb
// SIG // Zh0MweRdU66BUgaggYMwgYCkfjB8MQswCQYDVQQGEwJV
// SIG // UzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMH
// SIG // UmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBv
// SIG // cmF0aW9uMSYwJAYDVQQDEx1NaWNyb3NvZnQgVGltZS1T
// SIG // dGFtcCBQQ0EgMjAxMDANBgkqhkiG9w0BAQsFAAIFAOlG
// SIG // efkwIhgPMjAyNDAxMDgxMzQxMTNaGA8yMDI0MDEwOTEz
// SIG // NDExM1owdDA6BgorBgEEAYRZCgQBMSwwKjAKAgUA6UZ5
// SIG // +QIBADAHAgEAAgIcCzAHAgEAAgITKTAKAgUA6UfLeQIB
// SIG // ADA2BgorBgEEAYRZCgQCMSgwJjAMBgorBgEEAYRZCgMC
// SIG // oAowCAIBAAIDB6EgoQowCAIBAAIDAYagMA0GCSqGSIb3
// SIG // DQEBCwUAA4IBAQCsSwHR5dzVPlIrPKhv/DpPvRSoYGE6
// SIG // j7n4lVjBNq1UL4LDnJmbtRuYfwDQrMgqF+0aoWKGaJ5v
// SIG // 2utwKEkY8ytSrG6bR2qXx/kirG2UE6WXC3hOt0tTnm8L
// SIG // CiVlX6TnYcvwf788ADeLBCEhbUKie1SuiHHuTn3Y0b0C
// SIG // Vl+UEWtA1WUMDBiLFh5OU+vxRoO2ta8ujLqiNGJbDnes
// SIG // Ru9BfAjonbDMcxFkFnJ7tKU5Fa3W9NKLbHTWM4hXIvgO
// SIG // iCS7/M84hIyp8ADC9waQgfF7r/5Ce72FGdjpBKxBu0X+
// SIG // wBswknV0cCRRVJh0YkTp1pyel7MTDPUOvV8TIPpWH1Gs
// SIG // CYYOMYIEDTCCBAkCAQEwgZMwfDELMAkGA1UEBhMCVVMx
// SIG // EzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1Jl
// SIG // ZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3Jh
// SIG // dGlvbjEmMCQGA1UEAxMdTWljcm9zb2Z0IFRpbWUtU3Rh
// SIG // bXAgUENBIDIwMTACEzMAAAHSISQxSli/LREAAQAAAdIw
// SIG // DQYJYIZIAWUDBAIBBQCgggFKMBoGCSqGSIb3DQEJAzEN
// SIG // BgsqhkiG9w0BCRABBDAvBgkqhkiG9w0BCQQxIgQgy7lB
// SIG // ZSigqxG3W/Dt+zL3YeHl0D/hdPj/j9j7fqCZwC4wgfoG
// SIG // CyqGSIb3DQEJEAIvMYHqMIHnMIHkMIG9BCDHgCCT399I
// SIG // vWWzhMVOeexsFjWix9GebOuSRYGtg3mkTjCBmDCBgKR+
// SIG // MHwxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5n
// SIG // dG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVN
// SIG // aWNyb3NvZnQgQ29ycG9yYXRpb24xJjAkBgNVBAMTHU1p
// SIG // Y3Jvc29mdCBUaW1lLVN0YW1wIFBDQSAyMDEwAhMzAAAB
// SIG // 0iEkMUpYvy0RAAEAAAHSMCIEIIRwiy8aU3Qthy/B0QFl
// SIG // IRlSzquce0RdiZhQ9HzYt2uKMA0GCSqGSIb3DQEBCwUA
// SIG // BIICAI2SephpNcuRbKgkO1wmB7lu4zgrVwVLebvbdekg
// SIG // pEUm1uZ4Kw7N3Y8B02JH8Il2tSN5xR4r+BQt31JPqgAk
// SIG // PNyGHwiB8Ezpu7KEdxlZ+2P1kUqe4qPpSn+Lm5ZJjwBA
// SIG // PhLXsW11h0xGi0bx7d6di1tcXyK1hNbrAwKaVwl4Dz5+
// SIG // PkE3HCWOpuMDPuF/yWwZuq0qKYw/ohy9T47KIxA2Cb9+
// SIG // Xp9uVK99T71Su9wubvlNcCp9aQjpO2c4UnQr9W3q11oM
// SIG // 52epkcHssC1p+z1hgIXiwoG2g0nU5bbpjSNTglS85S7o
// SIG // tJqf0duCbS+jux8ncaO0OMFrDBrltApXh7ukSZL4GclQ
// SIG // iFPhp8NODzcTSIQOs4OQPWgE+DB0G8hhr5GxdqFWG0xg
// SIG // y/Y3dZ/eeFf/Z+I18hezpM2tH26XAjyUgPInTSpoKJ9D
// SIG // uEMUMGbJxTq0czkMwgus0/6mAeFkGhRmu2q65kB3FDTk
// SIG // 7tW0TIazWhTatLufOKm4KOZ+JovfJw2sqv+fjWYbXBvC
// SIG // 2vA/I3l3hL0BOWYGAZBVLzvJbeBIblMymnW6j7VDTi12
// SIG // N8ne4ZoTZ6w4cg9lEDWMgcsoiJ9jzjQE6op7JeIuLfvA
// SIG // 3/qPOWSAgbnxAhlKureO2OtK5OV8J+CljJPgsKzpYClI
// SIG // jvhwxmacq7ZcH0aSNFUozNTmNxn9
// SIG // End signature block
