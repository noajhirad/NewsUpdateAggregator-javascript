"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isSuspendable = exports.getActionSummary = exports.getNewEventSummary = exports.getMethodNameForAction = exports.getWrongActionNameError = exports.getWrongActionTypeError = exports.getNonDeterminismError = void 0;
const non_determinism_error_1 = require("../task/exception/non-determinism-error");
const pb = __importStar(require("../proto/orchestrator_service_pb"));
const enum_util_1 = require("../utils/enum.util");
function getNonDeterminismError(taskId, actionName) {
    return new non_determinism_error_1.NonDeterminismError(`A previous execution called ${actionName} with ID=${taskId} but the current execution doesn't have this action with this ID. This problem occurs when either the orchestration has non-deterministic logic or if the code was changed after an instance of this orchestration already started running`);
}
exports.getNonDeterminismError = getNonDeterminismError;
function getWrongActionTypeError(taskId, expectedMethodName, action) {
    const unexpectedMethodName = getMethodNameForAction(action);
    console.log("getWrongActionTypeError");
    return new non_determinism_error_1.NonDeterminismError(`Failed to restore orchestration state due to a history mismatch: A previous execution called ${expectedMethodName} with ID=${taskId}, but the current execution is instead trying to call ${unexpectedMethodName} as part of rebuilding it's history. This kind of mismatch can happen if an orchestration has non-deterministic logic or if the code was changed after an instance of this orchestration already started running.`);
}
exports.getWrongActionTypeError = getWrongActionTypeError;
function getWrongActionNameError(taskId, methodName, expectedTaskName, actualTaskName) {
    return new non_determinism_error_1.NonDeterminismError(`Failed to restore orchestration state due to a history mismatch: A previous execution called ${methodName} with name='${expectedTaskName}' and sequence number ${taskId}, but the current execution is instead trying to call ${actualTaskName} as part of rebuilding it's history. This kind of mismatch can happen if an orchestration has non-deterministic logic or if the code was changed after an instance of this orchestration already started running.`);
}
exports.getWrongActionNameError = getWrongActionNameError;
function getMethodNameForAction(action) {
    const actionType = action.getOrchestratoractiontypeCase();
    // What we think is easy is not that easy in Typescript
    // it is not javascript, but typescript that implements methods as abstract
    // this means that we cannot just get the name of the method from the prototype
    // instead, we hardcode them here
    switch (actionType) {
        case pb.OrchestratorAction.OrchestratoractiontypeCase.SCHEDULETASK:
            return "callActivity";
        case pb.OrchestratorAction.OrchestratoractiontypeCase.CREATETIMER:
            return "createTimer";
        case pb.OrchestratorAction.OrchestratoractiontypeCase.CREATESUBORCHESTRATION:
            return "callSubOrchestrator";
        case pb.OrchestratorAction.OrchestratoractiontypeCase.COMPLETEORCHESTRATION:
            return "completeOrchestration";
        default:
            throw new Error(`Unknown action type: ${actionType}`);
    }
}
exports.getMethodNameForAction = getMethodNameForAction;
function getNewEventSummary(newEvents) {
    if (!newEvents?.length) {
        return "[]";
    }
    else if (newEvents.length == 1) {
        const enumKey = (0, enum_util_1.enumValueToKey)(pb.HistoryEvent.EventtypeCase, newEvents[0].getEventtypeCase());
        return `[${enumKey}]`;
    }
    else {
        const counts = new Map();
        for (const event of newEvents) {
            const eventTypeName = (0, enum_util_1.enumValueToKey)(pb.HistoryEvent.EventtypeCase, event.getEventtypeCase()) ?? "UNKNOWN";
            const count = counts.get(eventTypeName) ?? 0;
            counts.set(eventTypeName, count + 1);
        }
        return `[${Array.from(counts.entries())
            .map(([name, count]) => `${name}=${count}`)
            .join(", ")}]`;
    }
}
exports.getNewEventSummary = getNewEventSummary;
/**
 * Returns a summary of the new actions that can be used for logging
 * @param newActions
 */
function getActionSummary(newActions) {
    if (!newActions?.length) {
        return "[]";
    }
    else if (newActions.length == 1) {
        const actionType = newActions[0].getOrchestratoractiontypeCase();
        const actionTypeName = (0, enum_util_1.enumValueToKey)(pb.OrchestratorAction.OrchestratoractiontypeCase, actionType) ?? "UNKNOWN";
        return actionTypeName;
    }
    else {
        const counts = new Map();
        for (const action of newActions) {
            const actionType = action.getOrchestratoractiontypeCase();
            const actionTypeName = (0, enum_util_1.enumValueToKey)(pb.OrchestratorAction.OrchestratoractiontypeCase, actionType) ?? "UNKNOWN";
            const count = counts.get(actionTypeName) ?? 0;
            counts.set(actionTypeName, count + 1);
        }
        return `[${Array.from(counts.entries())
            .map(([name, count]) => `${name}=${count}`)
            .join(", ")}]`;
    }
}
exports.getActionSummary = getActionSummary;
/**
 * Returns true of the event is one that can be suspended and resumed
 * @param event
 */
function isSuspendable(event) {
    return ([pb.HistoryEvent.EventtypeCase.EXECUTIONRESUMED, pb.HistoryEvent.EventtypeCase.EXECUTIONTERMINATED].indexOf(event.getEventtypeCase()) == -1);
}
exports.isSuspendable = isSuspendable;

// SIG // Begin signature block
// SIG // MIIoKwYJKoZIhvcNAQcCoIIoHDCCKBgCAQExDzANBglg
// SIG // hkgBZQMEAgEFADB3BgorBgEEAYI3AgEEoGkwZzAyBgor
// SIG // BgEEAYI3AgEeMCQCAQEEEBDgyQbOONQRoqMAEEvTUJAC
// SIG // AQACAQACAQACAQACAQAwMTANBglghkgBZQMEAgEFAAQg
// SIG // UF9ESbYZrELHH+339dBE6EID2zt5aKzN7sXlQPx5r9Kg
// SIG // gg12MIIF9DCCA9ygAwIBAgITMwAAA68wQA5Mo00FQQAA
// SIG // AAADrzANBgkqhkiG9w0BAQsFADB+MQswCQYDVQQGEwJV
// SIG // UzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMH
// SIG // UmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBv
// SIG // cmF0aW9uMSgwJgYDVQQDEx9NaWNyb3NvZnQgQ29kZSBT
// SIG // aWduaW5nIFBDQSAyMDExMB4XDTIzMTExNjE5MDkwMFoX
// SIG // DTI0MTExNDE5MDkwMFowdDELMAkGA1UEBhMCVVMxEzAR
// SIG // BgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1v
// SIG // bmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlv
// SIG // bjEeMBwGA1UEAxMVTWljcm9zb2Z0IENvcnBvcmF0aW9u
// SIG // MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA
// SIG // zkvLNa2un9GBrYNDoRGkGv7d0PqtTBB4ViYakFbjuWpm
// SIG // F0KcvDAzzaCWJPhVgIXjz+S8cHEoHuWnp/n+UOljT3eh
// SIG // A8Rs6Lb1aTYub3tB/e0txewv2sQ3yscjYdtTBtFvEm9L
// SIG // 8Yv76K3Cxzi/Yvrdg+sr7w8y5RHn1Am0Ff8xggY1xpWC
// SIG // XFI+kQM18njQDcUqSlwBnexYfqHBhzz6YXA/S0EziYBu
// SIG // 2O2mM7R6gSyYkEOHgIGTVOGnOvvC5xBgC4KNcnQuQSRL
// SIG // iUI2CmzU8vefR6ykruyzt1rNMPI8OqWHQtSDKXU5JNqb
// SIG // k4GNjwzcwbSzOHrxuxWHq91l/vLdVDGDUwIDAQABo4IB
// SIG // czCCAW8wHwYDVR0lBBgwFgYKKwYBBAGCN0wIAQYIKwYB
// SIG // BQUHAwMwHQYDVR0OBBYEFEcccTTyBDxkjvJKs/m4AgEF
// SIG // hl7BMEUGA1UdEQQ+MDykOjA4MR4wHAYDVQQLExVNaWNy
// SIG // b3NvZnQgQ29ycG9yYXRpb24xFjAUBgNVBAUTDTIzMDAx
// SIG // Mis1MDE4MjYwHwYDVR0jBBgwFoAUSG5k5VAF04KqFzc3
// SIG // IrVtqMp1ApUwVAYDVR0fBE0wSzBJoEegRYZDaHR0cDov
// SIG // L3d3dy5taWNyb3NvZnQuY29tL3BraW9wcy9jcmwvTWlj
// SIG // Q29kU2lnUENBMjAxMV8yMDExLTA3LTA4LmNybDBhBggr
// SIG // BgEFBQcBAQRVMFMwUQYIKwYBBQUHMAKGRWh0dHA6Ly93
// SIG // d3cubWljcm9zb2Z0LmNvbS9wa2lvcHMvY2VydHMvTWlj
// SIG // Q29kU2lnUENBMjAxMV8yMDExLTA3LTA4LmNydDAMBgNV
// SIG // HRMBAf8EAjAAMA0GCSqGSIb3DQEBCwUAA4ICAQCEsRbf
// SIG // 80dn60xTweOWHZoWaQdpzSaDqIvqpYHE5ZzuEMJWDdcP
// SIG // 72MGw8v6BSaJQ+a+hTCXdERnIBDPKvU4ENjgu4EBJocH
// SIG // lSe8riiZUAR+z+z4OUYqoFd3EqJyfjjOJBR2z94Dy4ss
// SIG // 7LEkHUbj2NZiFqBoPYu2OGQvEk+1oaUsnNKZ7Nl7FHtV
// SIG // 7CI2lHBru83e4IPe3glIi0XVZJT5qV6Gx/QhAFmpEVBj
// SIG // SAmDdgII4UUwuI9yiX6jJFNOEek6MoeP06LMJtbqA3Bq
// SIG // +ZWmJ033F97uVpyaiS4bj3vFI/ZBgDnMqNDtZjcA2vi4
// SIG // RRMweggd9vsHyTLpn6+nXoLy03vMeebq0C3k44pgUIEu
// SIG // PQUlJIRTe6IrN3GcjaZ6zHGuQGWgu6SyO9r7qkrEpS2p
// SIG // RjnGZjx2RmCamdAWnDdu+DmfNEPAddYjaJJ7PTnd+PGz
// SIG // G+WeH4ocWgVnm5fJFhItjj70CJjgHqt57e1FiQcyWCwB
// SIG // hKX2rGgN2UICHBF3Q/rsKOspjMw2OlGphTn2KmFl5J7c
// SIG // Qxru54A9roClLnHGCiSUYos/iwFHI/dAVXEh0S0KKfTf
// SIG // M6AC6/9bCbsD61QLcRzRIElvgCgaiMWFjOBL99pemoEl
// SIG // AHsyzG6uX93fMfas09N9YzA0/rFAKAsNDOcFbQlEHKiD
// SIG // T7mI20tVoCcmSIhJATCCB3owggVioAMCAQICCmEOkNIA
// SIG // AAAAAAMwDQYJKoZIhvcNAQELBQAwgYgxCzAJBgNVBAYT
// SIG // AlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQH
// SIG // EwdSZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29y
// SIG // cG9yYXRpb24xMjAwBgNVBAMTKU1pY3Jvc29mdCBSb290
// SIG // IENlcnRpZmljYXRlIEF1dGhvcml0eSAyMDExMB4XDTEx
// SIG // MDcwODIwNTkwOVoXDTI2MDcwODIxMDkwOVowfjELMAkG
// SIG // A1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAO
// SIG // BgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29m
// SIG // dCBDb3Jwb3JhdGlvbjEoMCYGA1UEAxMfTWljcm9zb2Z0
// SIG // IENvZGUgU2lnbmluZyBQQ0EgMjAxMTCCAiIwDQYJKoZI
// SIG // hvcNAQEBBQADggIPADCCAgoCggIBAKvw+nIQHC6t2G6q
// SIG // ghBNNLrytlghn0IbKmvpWlCquAY4GgRJun/DDB7dN2vG
// SIG // EtgL8DjCmQawyDnVARQxQtOJDXlkh36UYCRsr55JnOlo
// SIG // XtLfm1OyCizDr9mpK656Ca/XllnKYBoF6WZ26DJSJhIv
// SIG // 56sIUM+zRLdd2MQuA3WraPPLbfM6XKEW9Ea64DhkrG5k
// SIG // NXimoGMPLdNAk/jj3gcN1Vx5pUkp5w2+oBN3vpQ97/vj
// SIG // K1oQH01WKKJ6cuASOrdJXtjt7UORg9l7snuGG9k+sYxd
// SIG // 6IlPhBryoS9Z5JA7La4zWMW3Pv4y07MDPbGyr5I4ftKd
// SIG // gCz1TlaRITUlwzluZH9TupwPrRkjhMv0ugOGjfdf8NBS
// SIG // v4yUh7zAIXQlXxgotswnKDglmDlKNs98sZKuHCOnqWbs
// SIG // YR9q4ShJnV+I4iVd0yFLPlLEtVc/JAPw0XpbL9Uj43Bd
// SIG // D1FGd7P4AOG8rAKCX9vAFbO9G9RVS+c5oQ/pI0m8GLhE
// SIG // fEXkwcNyeuBy5yTfv0aZxe/CHFfbg43sTUkwp6uO3+xb
// SIG // n6/83bBm4sGXgXvt1u1L50kppxMopqd9Z4DmimJ4X7Iv
// SIG // hNdXnFy/dygo8e1twyiPLI9AN0/B4YVEicQJTMXUpUMv
// SIG // dJX3bvh4IFgsE11glZo+TzOE2rCIF96eTvSWsLxGoGyY
// SIG // 0uDWiIwLAgMBAAGjggHtMIIB6TAQBgkrBgEEAYI3FQEE
// SIG // AwIBADAdBgNVHQ4EFgQUSG5k5VAF04KqFzc3IrVtqMp1
// SIG // ApUwGQYJKwYBBAGCNxQCBAweCgBTAHUAYgBDAEEwCwYD
// SIG // VR0PBAQDAgGGMA8GA1UdEwEB/wQFMAMBAf8wHwYDVR0j
// SIG // BBgwFoAUci06AjGQQ7kUBU7h6qfHMdEjiTQwWgYDVR0f
// SIG // BFMwUTBPoE2gS4ZJaHR0cDovL2NybC5taWNyb3NvZnQu
// SIG // Y29tL3BraS9jcmwvcHJvZHVjdHMvTWljUm9vQ2VyQXV0
// SIG // MjAxMV8yMDExXzAzXzIyLmNybDBeBggrBgEFBQcBAQRS
// SIG // MFAwTgYIKwYBBQUHMAKGQmh0dHA6Ly93d3cubWljcm9z
// SIG // b2Z0LmNvbS9wa2kvY2VydHMvTWljUm9vQ2VyQXV0MjAx
// SIG // MV8yMDExXzAzXzIyLmNydDCBnwYDVR0gBIGXMIGUMIGR
// SIG // BgkrBgEEAYI3LgMwgYMwPwYIKwYBBQUHAgEWM2h0dHA6
// SIG // Ly93d3cubWljcm9zb2Z0LmNvbS9wa2lvcHMvZG9jcy9w
// SIG // cmltYXJ5Y3BzLmh0bTBABggrBgEFBQcCAjA0HjIgHQBM
// SIG // AGUAZwBhAGwAXwBwAG8AbABpAGMAeQBfAHMAdABhAHQA
// SIG // ZQBtAGUAbgB0AC4gHTANBgkqhkiG9w0BAQsFAAOCAgEA
// SIG // Z/KGpZjgVHkaLtPYdGcimwuWEeFjkplCln3SeQyQwWVf
// SIG // Liw++MNy0W2D/r4/6ArKO79HqaPzadtjvyI1pZddZYSQ
// SIG // fYtGUFXYDJJ80hpLHPM8QotS0LD9a+M+By4pm+Y9G6XU
// SIG // tR13lDni6WTJRD14eiPzE32mkHSDjfTLJgJGKsKKELuk
// SIG // qQUMm+1o+mgulaAqPyprWEljHwlpblqYluSD9MCP80Yr
// SIG // 3vw70L01724lruWvJ+3Q3fMOr5kol5hNDj0L8giJ1h/D
// SIG // Mhji8MUtzluetEk5CsYKwsatruWy2dsViFFFWDgycSca
// SIG // f7H0J/jeLDogaZiyWYlobm+nt3TDQAUGpgEqKD6CPxNN
// SIG // ZgvAs0314Y9/HG8VfUWnduVAKmWjw11SYobDHWM2l4bf
// SIG // 2vP48hahmifhzaWX0O5dY0HjWwechz4GdwbRBrF1HxS+
// SIG // YWG18NzGGwS+30HHDiju3mUv7Jf2oVyW2ADWoUa9WfOX
// SIG // pQlLSBCZgB/QACnFsZulP0V3HjXG0qKin3p6IvpIlR+r
// SIG // +0cjgPWe+L9rt0uX4ut1eBrs6jeZeRhL/9azI2h15q/6
// SIG // /IvrC4DqaTuv/DDtBEyO3991bWORPdGdVk5Pv4BXIqF4
// SIG // ETIheu9BCrE/+6jMpF3BoYibV3FWTkhFwELJm3ZbCoBI
// SIG // a/15n8G9bW1qyVJzEw16UM0xghoNMIIaCQIBATCBlTB+
// SIG // MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3Rv
// SIG // bjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWlj
// SIG // cm9zb2Z0IENvcnBvcmF0aW9uMSgwJgYDVQQDEx9NaWNy
// SIG // b3NvZnQgQ29kZSBTaWduaW5nIFBDQSAyMDExAhMzAAAD
// SIG // rzBADkyjTQVBAAAAAAOvMA0GCWCGSAFlAwQCAQUAoIGu
// SIG // MBkGCSqGSIb3DQEJAzEMBgorBgEEAYI3AgEEMBwGCisG
// SIG // AQQBgjcCAQsxDjAMBgorBgEEAYI3AgEVMC8GCSqGSIb3
// SIG // DQEJBDEiBCBtxZFGINk0uWDkpixfW0QqMk4fmMMuYXC6
// SIG // mGZ326Q2IDBCBgorBgEEAYI3AgEMMTQwMqAUgBIATQBp
// SIG // AGMAcgBvAHMAbwBmAHShGoAYaHR0cDovL3d3dy5taWNy
// SIG // b3NvZnQuY29tMA0GCSqGSIb3DQEBAQUABIIBAFHDUOBU
// SIG // SU+wR8Nty5ZX3I1Q6sVPG6/CfG6RoJne60C/ZVCuukrn
// SIG // lpQO+KIyYgxfEhsBNXjVjAptYPSliSU93C1oWcrAngDO
// SIG // 0Bl5zIGuJ6bfy9obwiA0brXRti3Vyim91IXfTq5GlXqG
// SIG // hAb9/A3NH6MAbgrKuXw9fVT8RiVJxOB4nqaU8r5ivdpQ
// SIG // fTvA3VgidHbX4ahq2ITEUqsau7N710dOzM6iqGiXZSwd
// SIG // EiXfz6fZpr78ujlGBu6p3sDCWP51jp0ohzDQuJafNfAi
// SIG // fD26jWMl8Idw5A6k9aJ4QZI+haVvzckXDJvOQCpBE7qi
// SIG // rlOnO+Mvh0xNa64YnCcbhiv89suhgheXMIIXkwYKKwYB
// SIG // BAGCNwMDATGCF4Mwghd/BgkqhkiG9w0BBwKgghdwMIIX
// SIG // bAIBAzEPMA0GCWCGSAFlAwQCAQUAMIIBUgYLKoZIhvcN
// SIG // AQkQAQSgggFBBIIBPTCCATkCAQEGCisGAQQBhFkKAwEw
// SIG // MTANBglghkgBZQMEAgEFAAQgo95SIwOF2p/Bc98xfauZ
// SIG // xVwBDrmMfrDz6R9zfucoAwsCBmV66Z0wYhgTMjAyNDAx
// SIG // MDgxODE1NDkuODM1WjAEgAIB9KCB0aSBzjCByzELMAkG
// SIG // A1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAO
// SIG // BgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29m
// SIG // dCBDb3Jwb3JhdGlvbjElMCMGA1UECxMcTWljcm9zb2Z0
// SIG // IEFtZXJpY2EgT3BlcmF0aW9uczEnMCUGA1UECxMeblNo
// SIG // aWVsZCBUU1MgRVNOOkE5MzUtMDNFMC1EOTQ3MSUwIwYD
// SIG // VQQDExxNaWNyb3NvZnQgVGltZS1TdGFtcCBTZXJ2aWNl
// SIG // oIIR7TCCByAwggUIoAMCAQICEzMAAAHRsltAKGwu0kUA
// SIG // AQAAAdEwDQYJKoZIhvcNAQELBQAwfDELMAkGA1UEBhMC
// SIG // VVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcT
// SIG // B1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jw
// SIG // b3JhdGlvbjEmMCQGA1UEAxMdTWljcm9zb2Z0IFRpbWUt
// SIG // U3RhbXAgUENBIDIwMTAwHhcNMjMwNTI1MTkxMjE4WhcN
// SIG // MjQwMjAxMTkxMjE4WjCByzELMAkGA1UEBhMCVVMxEzAR
// SIG // BgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1v
// SIG // bmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlv
// SIG // bjElMCMGA1UECxMcTWljcm9zb2Z0IEFtZXJpY2EgT3Bl
// SIG // cmF0aW9uczEnMCUGA1UECxMeblNoaWVsZCBUU1MgRVNO
// SIG // OkE5MzUtMDNFMC1EOTQ3MSUwIwYDVQQDExxNaWNyb3Nv
// SIG // ZnQgVGltZS1TdGFtcCBTZXJ2aWNlMIICIjANBgkqhkiG
// SIG // 9w0BAQEFAAOCAg8AMIICCgKCAgEAmUzaNDnhs9lxXdoC
// SIG // 4OZ05QZvFzqbsCSIl7DFOta8KtWSg6WuON0a0hv6R/Bs
// SIG // +lzZxUChpwqjQrZr6ClCwKcK0/7O/3tV9JTRSpo+1O1+
// SIG // KdNEtLkG1ui8Ep/81h2htnOeGV7BmPgWH4Vg4GxaQk8U
// SIG // c050Qhutm5Fj6emR22T4OB7dQkQgDIYThk0fMCOBu8MF
// SIG // mcHTHOlL1FJatKpfQMQH85GEaYtrUbwxzHZmd78l6aoR
// SIG // cL0RvHIAh/00wo1uaumjW3aii9wRQz81LbgjbD1y9/xN
// SIG // HUdmwzKmtGjR/oiH4RguP73MLrXjjAj1CA1UqgwjXyGj
// SIG // wxMGHItX3fYLtc1cPhxIQ2TOxGt58SFK87fkX6eU6DDI
// SIG // +EAJielGnZvkz2w26PJBSCu9EoZlvMJ/HyZPUXkEBKU7
// SIG // SDeN3kb/UJl8t1HnfNKLDgRPlpHTL0ghYfqoArCnc0MU
// SIG // CRutnE3qFNnqjYR96KaV5sn1VMG7Hn0MzD7W4pwmXdBV
// SIG // JZpTP3R/uDp4qkMmh767WMt8KiGn2N83hSE5VQKD/avb
// SIG // xeFuyh0f7hdJr06QC+TWkwzdaZUEtDHYzJIM2SuYLcKj
// SIG // nv9605agc8cGu2GKd7qz+clpE8yEhp4TViGTsTskCDsW
// SIG // X24iGwB25tzPIY+9ykFnAkeSWr4JMFJp3BRxEmkH+A66
// SIG // rPv9S9UCAwEAAaOCAUkwggFFMB0GA1UdDgQWBBQLjvFM
// SIG // xew3B9JprBeF0McR0L0tozAfBgNVHSMEGDAWgBSfpxVd
// SIG // AF5iXYP05dJlpxtTNRnpcjBfBgNVHR8EWDBWMFSgUqBQ
// SIG // hk5odHRwOi8vd3d3Lm1pY3Jvc29mdC5jb20vcGtpb3Bz
// SIG // L2NybC9NaWNyb3NvZnQlMjBUaW1lLVN0YW1wJTIwUENB
// SIG // JTIwMjAxMCgxKS5jcmwwbAYIKwYBBQUHAQEEYDBeMFwG
// SIG // CCsGAQUFBzAChlBodHRwOi8vd3d3Lm1pY3Jvc29mdC5j
// SIG // b20vcGtpb3BzL2NlcnRzL01pY3Jvc29mdCUyMFRpbWUt
// SIG // U3RhbXAlMjBQQ0ElMjAyMDEwKDEpLmNydDAMBgNVHRMB
// SIG // Af8EAjAAMBYGA1UdJQEB/wQMMAoGCCsGAQUFBwMIMA4G
// SIG // A1UdDwEB/wQEAwIHgDANBgkqhkiG9w0BAQsFAAOCAgEA
// SIG // m7va0wB1duJmNKqBuXhJyJs+WpBl074gcCqdmOdbNusP
// SIG // KA61qK/ptNEeP9wXA5mJVCvDa8f2rmBWInWXXXFI8ONk
// SIG // MUkrZr/6lpwkIv9jpx99ilR0PpDDmTwAUExtV5HJ2D1D
// SIG // jhBKK+n/9ybNbo+MIx8xOFeGrpmFwQLK+C+SkfLynrOb
// SIG // RcYTJFjQ/zu1v0Wh2MCTIzJMVaLAaJO1dtbCQJcUnBF8
// SIG // XyWvv6pKlK+wmYMN0eIwh0ZD6kITFom1zzGGq/4hdGbi
// SIG // wfTvPQzCTYYyvQUn+oqoGaDLsyFbfhAaE86b//aeMEOs
// SIG // aAQrNvZpI/xCFhXXPuWt9JLgkDkhDo9O/liNvQOJOkCE
// SIG // QecPnjJmdCXnNLEsnkAeSo8ROdYmDIbZTK1CnK9Opwag
// SIG // rEij2LEgCEwM4LLCQ/mf3E0uwrt+Xya1oTPTWF9uLgMW
// SIG // CwFtIqTbVqbSHlempLmRHhFegTbTN1U5PpgJVef3gv9G
// SIG // Ne2lUoyuf4Mg6CzZq4FcL+UwGgZqv8IEURR5lvVCd87/
// SIG // C5pOpiKAMk6agW7lIzC8q7Wo7krAP5tg5yjDtEIs9b/h
// SIG // UlW6jN/Cfz05YQk1GxTsdJC0+2P+/mcq4pVQs8gGHxSI
// SIG // pwyI1pTPObQ3lPGXyQoxSsKtw7EcVeCWNfMcMPE05qHd
// SIG // 5ZK/TahkOeC5sj1XPuYmza4wggdxMIIFWaADAgECAhMz
// SIG // AAAAFcXna54Cm0mZAAAAAAAVMA0GCSqGSIb3DQEBCwUA
// SIG // MIGIMQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGlu
// SIG // Z3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMV
// SIG // TWljcm9zb2Z0IENvcnBvcmF0aW9uMTIwMAYDVQQDEylN
// SIG // aWNyb3NvZnQgUm9vdCBDZXJ0aWZpY2F0ZSBBdXRob3Jp
// SIG // dHkgMjAxMDAeFw0yMTA5MzAxODIyMjVaFw0zMDA5MzAx
// SIG // ODMyMjVaMHwxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpX
// SIG // YXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYD
// SIG // VQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xJjAkBgNV
// SIG // BAMTHU1pY3Jvc29mdCBUaW1lLVN0YW1wIFBDQSAyMDEw
// SIG // MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEA
// SIG // 5OGmTOe0ciELeaLL1yR5vQ7VgtP97pwHB9KpbE51yMo1
// SIG // V/YBf2xK4OK9uT4XYDP/XE/HZveVU3Fa4n5KWv64NmeF
// SIG // RiMMtY0Tz3cywBAY6GB9alKDRLemjkZrBxTzxXb1hlDc
// SIG // wUTIcVxRMTegCjhuje3XD9gmU3w5YQJ6xKr9cmmvHaus
// SIG // 9ja+NSZk2pg7uhp7M62AW36MEBydUv626GIl3GoPz130
// SIG // /o5Tz9bshVZN7928jaTjkY+yOSxRnOlwaQ3KNi1wjjHI
// SIG // NSi947SHJMPgyY9+tVSP3PoFVZhtaDuaRr3tpK56KTes
// SIG // y+uDRedGbsoy1cCGMFxPLOJiss254o2I5JasAUq7vnGp
// SIG // F1tnYN74kpEeHT39IM9zfUGaRnXNxF803RKJ1v2lIH1+
// SIG // /NmeRd+2ci/bfV+AutuqfjbsNkz2K26oElHovwUDo9Fz
// SIG // pk03dJQcNIIP8BDyt0cY7afomXw/TNuvXsLz1dhzPUNO
// SIG // wTM5TI4CvEJoLhDqhFFG4tG9ahhaYQFzymeiXtcodgLi
// SIG // Mxhy16cg8ML6EgrXY28MyTZki1ugpoMhXV8wdJGUlNi5
// SIG // UPkLiWHzNgY1GIRH29wb0f2y1BzFa/ZcUlFdEtsluq9Q
// SIG // BXpsxREdcu+N+VLEhReTwDwV2xo3xwgVGD94q0W29R6H
// SIG // XtqPnhZyacaue7e3PmriLq0CAwEAAaOCAd0wggHZMBIG
// SIG // CSsGAQQBgjcVAQQFAgMBAAEwIwYJKwYBBAGCNxUCBBYE
// SIG // FCqnUv5kxJq+gpE8RjUpzxD/LwTuMB0GA1UdDgQWBBSf
// SIG // pxVdAF5iXYP05dJlpxtTNRnpcjBcBgNVHSAEVTBTMFEG
// SIG // DCsGAQQBgjdMg30BATBBMD8GCCsGAQUFBwIBFjNodHRw
// SIG // Oi8vd3d3Lm1pY3Jvc29mdC5jb20vcGtpb3BzL0RvY3Mv
// SIG // UmVwb3NpdG9yeS5odG0wEwYDVR0lBAwwCgYIKwYBBQUH
// SIG // AwgwGQYJKwYBBAGCNxQCBAweCgBTAHUAYgBDAEEwCwYD
// SIG // VR0PBAQDAgGGMA8GA1UdEwEB/wQFMAMBAf8wHwYDVR0j
// SIG // BBgwFoAU1fZWy4/oolxiaNE9lJBb186aGMQwVgYDVR0f
// SIG // BE8wTTBLoEmgR4ZFaHR0cDovL2NybC5taWNyb3NvZnQu
// SIG // Y29tL3BraS9jcmwvcHJvZHVjdHMvTWljUm9vQ2VyQXV0
// SIG // XzIwMTAtMDYtMjMuY3JsMFoGCCsGAQUFBwEBBE4wTDBK
// SIG // BggrBgEFBQcwAoY+aHR0cDovL3d3dy5taWNyb3NvZnQu
// SIG // Y29tL3BraS9jZXJ0cy9NaWNSb29DZXJBdXRfMjAxMC0w
// SIG // Ni0yMy5jcnQwDQYJKoZIhvcNAQELBQADggIBAJ1Vffwq
// SIG // reEsH2cBMSRb4Z5yS/ypb+pcFLY+TkdkeLEGk5c9MTO1
// SIG // OdfCcTY/2mRsfNB1OW27DzHkwo/7bNGhlBgi7ulmZzpT
// SIG // Td2YurYeeNg2LpypglYAA7AFvonoaeC6Ce5732pvvinL
// SIG // btg/SHUB2RjebYIM9W0jVOR4U3UkV7ndn/OOPcbzaN9l
// SIG // 9qRWqveVtihVJ9AkvUCgvxm2EhIRXT0n4ECWOKz3+SmJ
// SIG // w7wXsFSFQrP8DJ6LGYnn8AtqgcKBGUIZUnWKNsIdw2Fz
// SIG // Lixre24/LAl4FOmRsqlb30mjdAy87JGA0j3mSj5mO0+7
// SIG // hvoyGtmW9I/2kQH2zsZ0/fZMcm8Qq3UwxTSwethQ/gpY
// SIG // 3UA8x1RtnWN0SCyxTkctwRQEcb9k+SS+c23Kjgm9swFX
// SIG // SVRk2XPXfx5bRAGOWhmRaw2fpCjcZxkoJLo4S5pu+yFU
// SIG // a2pFEUep8beuyOiJXk+d0tBMdrVXVAmxaQFEfnyhYWxz
// SIG // /gq77EFmPWn9y8FBSX5+k77L+DvktxW/tM4+pTFRhLy/
// SIG // AsGConsXHRWJjXD+57XQKBqJC4822rpM+Zv/Cuk0+CQ1
// SIG // ZyvgDbjmjJnW4SLq8CdCPSWU5nR0W2rRnj7tfqAxM328
// SIG // y+l7vzhwRNGQ8cirOoo6CGJ/2XBjU02N7oJtpQUQwXEG
// SIG // ahC0HVUzWLOhcGbyoYIDUDCCAjgCAQEwgfmhgdGkgc4w
// SIG // gcsxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5n
// SIG // dG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVN
// SIG // aWNyb3NvZnQgQ29ycG9yYXRpb24xJTAjBgNVBAsTHE1p
// SIG // Y3Jvc29mdCBBbWVyaWNhIE9wZXJhdGlvbnMxJzAlBgNV
// SIG // BAsTHm5TaGllbGQgVFNTIEVTTjpBOTM1LTAzRTAtRDk0
// SIG // NzElMCMGA1UEAxMcTWljcm9zb2Z0IFRpbWUtU3RhbXAg
// SIG // U2VydmljZaIjCgEBMAcGBSsOAwIaAxUARyWNhb/hoS0L
// SIG // UQ0dryMwWkr/+yyggYMwgYCkfjB8MQswCQYDVQQGEwJV
// SIG // UzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMH
// SIG // UmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBv
// SIG // cmF0aW9uMSYwJAYDVQQDEx1NaWNyb3NvZnQgVGltZS1T
// SIG // dGFtcCBQQ0EgMjAxMDANBgkqhkiG9w0BAQsFAAIFAOlG
// SIG // XTEwIhgPMjAyNDAxMDgxMTM4MjVaGA8yMDI0MDEwOTEx
// SIG // MzgyNVowdzA9BgorBgEEAYRZCgQBMS8wLTAKAgUA6UZd
// SIG // MQIBADAKAgEAAgIbDwIB/zAHAgEAAgIS5jAKAgUA6Ueu
// SIG // sQIBADA2BgorBgEEAYRZCgQCMSgwJjAMBgorBgEEAYRZ
// SIG // CgMCoAowCAIBAAIDB6EgoQowCAIBAAIDAYagMA0GCSqG
// SIG // SIb3DQEBCwUAA4IBAQASlb1dcNNzyZWj72RiT5qYRpHO
// SIG // Joh9Dm8tUPoaSiUT2SxFD0/VTWJkaPHAiHyJpR7chaqN
// SIG // bDYDx4kPk2aVkhvMIZjs1gBzKCKAEMf730Bnl+1ux0iu
// SIG // /s8P8pei5C8arDqVRRNpWgGBbIq3Nitv5WIQJssjkjtT
// SIG // cHXVGC7r5PHhdf49LPqr/MfsttyZctwIizUkpVirXoGm
// SIG // mwrmauWRrjHhFiJdw6d7Zr8KBPJOg5dEJgK+Mx5QZvw2
// SIG // bkRjOwjSPQ2NioR1jTSH2onqXJiBfyP53CFbMu+iI3E2
// SIG // NtOCFWuzJEm3jhWj9CzLEAYoaAzx8Kc+ECsUHJ3QGy+l
// SIG // LvkxHcpKMYIEDTCCBAkCAQEwgZMwfDELMAkGA1UEBhMC
// SIG // VVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcT
// SIG // B1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jw
// SIG // b3JhdGlvbjEmMCQGA1UEAxMdTWljcm9zb2Z0IFRpbWUt
// SIG // U3RhbXAgUENBIDIwMTACEzMAAAHRsltAKGwu0kUAAQAA
// SIG // AdEwDQYJYIZIAWUDBAIBBQCgggFKMBoGCSqGSIb3DQEJ
// SIG // AzENBgsqhkiG9w0BCRABBDAvBgkqhkiG9w0BCQQxIgQg
// SIG // c9+zOd9EK/5LpInk897O7OzFLKjJe6tUEUDWSXoOh8ow
// SIG // gfoGCyqGSIb3DQEJEAIvMYHqMIHnMIHkMIG9BCDMvGF5
// SIG // AgC7+e3ObEYaz07m9auE8CeqFQN+pPCIiPwHDDCBmDCB
// SIG // gKR+MHwxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNo
// SIG // aW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQK
// SIG // ExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xJjAkBgNVBAMT
// SIG // HU1pY3Jvc29mdCBUaW1lLVN0YW1wIFBDQSAyMDEwAhMz
// SIG // AAAB0bJbQChsLtJFAAEAAAHRMCIEILl6unC3Ne/tKRB1
// SIG // OQfhLF4MhH65ir3XtgsGnw4hgnyEMA0GCSqGSIb3DQEB
// SIG // CwUABIICACKEL1o4h8KTtIO4vYvMdNbsTiZiJNHnTWxs
// SIG // nZFIX7S2hdsr66jP0HTi6bCAuj+Sr3YbU8eVPSfFAPW3
// SIG // URQLhiIL3A7MPTi0OVgsdPC/pf7qZiaPJDByl8Lk6PAr
// SIG // lYKYdYb8FiaDqYwvxWPfkOrdgU0zje1KIpnlPxrW3Ezw
// SIG // paQ4E+rj9ujQvVCsVHcz4AMxqSwDJ7xRGweq6Wj/W/nc
// SIG // JF6YBeEl0GDQXy8bz7Oz8Kbt565cx2kE/KqV8USFY+pY
// SIG // NLW7vwgExjcT1OoCFBJM216hTBsI6zruKZ22AN+gM+9z
// SIG // cufmRCqY+DhK/yjS+TEZPI3kfWGt2PtUpP+tgPOiNgdh
// SIG // DHgG6THePX2dBlVfqsoGbygrNGore7bRW46i2v58EIL8
// SIG // vkq636BcPExzluL33WEwUjSXRMLvalkbD7XznwZ1bT19
// SIG // /bO3OjIrVdwTYsCVND7LN8ZHLmAWYzIjWAoErdRno3DC
// SIG // xsoe/jAaSdq8OuMLSAhMDu/t+p6tlpT29rLk0+095JIr
// SIG // mrhWe1pTXvU2O4KL4VhhObL93YD/5qMUpoO2cUrYgWcH
// SIG // gDU3TAN1V48J90vERe3xbXWbuXE05ezBz9yjkSIkf2u1
// SIG // JWGcW9pDM4tQClodua+eNAWCIt2shX7DMJbUcfdS/C3j
// SIG // W7/wy28smYmIcYfZWeSMIgJ93GqZEmhy
// SIG // End signature block
