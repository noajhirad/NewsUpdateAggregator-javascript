"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrchestrationExecutor = void 0;
const _1 = require(".");
const pb = __importStar(require("../proto/orchestrator_service_pb"));
const task_1 = require("../task");
const orchestration_state_error_1 = require("../task/exception/orchestration-state-error");
const enum_util_1 = require("../utils/enum.util");
const pb_helper_util_1 = require("../utils/pb-helper.util");
const orchestrator_not_registered_error_1 = require("./exception/orchestrator-not-registered-error");
const stop_iteration_error_1 = require("./exception/stop-iteration-error");
const runtime_orchestration_context_1 = require("./runtime-orchestration-context");
class OrchestrationExecutor {
    constructor(registry) {
        this._registry = registry;
        this._generator = undefined;
        this._isSuspended = false;
        this._suspendedEvents = [];
    }
    async execute(instanceId, oldEvents, newEvents) {
        if (!newEvents?.length) {
            throw new orchestration_state_error_1.OrchestrationStateError("The new history event list must have at least one event in it");
        }
        const ctx = new runtime_orchestration_context_1.RuntimeOrchestrationContext(instanceId);
        try {
            // Rebuild the local state by replaying the history events into the orchestrator function
            console.info(`${instanceId}: Rebuilding local state with ${oldEvents.length} history event...`);
            ctx._isReplaying = true;
            for (const oldEvent of oldEvents) {
                await this.processEvent(ctx, oldEvent);
            }
            // Get new actions by executing newly received events into the orchestrator function
            const summary = (0, _1.getNewEventSummary)(newEvents);
            console.info(`${instanceId}: Processing ${newEvents.length} new history event(s): ${summary}`);
            ctx._isReplaying = false;
            for (const newEvent of newEvents) {
                await this.processEvent(ctx, newEvent);
            }
        }
        catch (e) {
            ctx.setFailed(e);
        }
        if (!ctx._isComplete) {
            const taskCount = Object.keys(ctx._pendingTasks).length;
            const eventCount = Object.keys(ctx._pendingEvents).length;
            console.log(`${instanceId}: Waiting for ${taskCount} task(s) and ${eventCount} event(s) to complete...`);
        }
        else if (ctx._completionStatus &&
            ctx._completionStatus !== pb.OrchestrationStatus.ORCHESTRATION_STATUS_CONTINUED_AS_NEW) {
            const completionStatusStr = (0, pb_helper_util_1.getOrchestrationStatusStr)(ctx._completionStatus);
            console.log(`${instanceId}: Orchestration completed with status ${completionStatusStr}`);
        }
        const actions = ctx.getActions();
        console.log(`${instanceId}: Returning ${actions.length} action(s)`);
        return actions;
    }
    async processEvent(ctx, event) {
        // Check if we are suspended to see if we need to buffer the event until we are resumed
        if (this._isSuspended && (0, _1.isSuspendable)(event)) {
            console.log("Suspended, buffering event");
            this._suspendedEvents.push(event);
            return;
        }
        const eventType = event.getEventtypeCase();
        const eventTypeName = (0, enum_util_1.enumValueToKey)(pb.HistoryEvent.EventtypeCase, eventType);
        // console.debug(`DEBUG - Processing event type ${eventTypeName} (${event.getEventtypeCase()})`);
        // Process the event type
        try {
            switch (eventType) {
                case pb.HistoryEvent.EventtypeCase.ORCHESTRATORSTARTED:
                    ctx._currentUtcDatetime = event.getTimestamp()?.toDate();
                    break;
                case pb.HistoryEvent.EventtypeCase.EXECUTIONSTARTED:
                    {
                        // TODO: Check if we already started the orchestration
                        const executionStartedEvent = event.getExecutionstarted();
                        const fn = this._registry.getOrchestrator(executionStartedEvent ? executionStartedEvent.getName() : undefined);
                        if (!fn) {
                            throw new orchestrator_not_registered_error_1.OrchestratorNotRegisteredError(executionStartedEvent?.getName());
                        }
                        // Deserialize the input, if any
                        let input = undefined;
                        if (executionStartedEvent?.getInput() && executionStartedEvent?.getInput()?.toString() !== "") {
                            input = JSON.parse(executionStartedEvent.getInput()?.toString() || "{}");
                        }
                        // This does not execute the generator, it creates it
                        // since we create an async iterator, we await the creation (so we can use await in the generator itself beside yield)
                        const result = await fn(ctx, input);
                        // When a generator is passed this is
                        // [object AsyncGenerator]
                        const resultType = result?.toString();
                        // Try to extract AsyncGenerator
                        const match = /\[object (\w+)\]/.exec(resultType);
                        const resultTypeName = (match && match[1]) ?? "";
                        // Check if the result is a generator
                        if (resultTypeName.indexOf("Generator") > -1) {
                            // Start the orchestrator's generator function
                            await ctx.run(result);
                        }
                        else {
                            console.log(`An orchestrator was returned that doesn't schedule any tasks (type = ${resultType})`);
                            // This is an orchestrator that doesn't schedule any tasks
                            ctx.setComplete(result, pb.OrchestrationStatus.ORCHESTRATION_STATUS_COMPLETED);
                        }
                    }
                    break;
                case pb.HistoryEvent.EventtypeCase.TIMERCREATED:
                    // This history event confirms that the timer was successfully scheduled. Remove the timerCreated event from the pending action list so we don't schedule it again.
                    {
                        const timerId = event.getEventid();
                        const action = ctx._pendingActions[timerId];
                        // Delete it
                        delete ctx._pendingActions[timerId];
                        const isTimerAction = action?.getCreatetimer();
                        if (!action) {
                            throw (0, _1.getNonDeterminismError)(timerId, (0, task_1.getName)(ctx.createTimer));
                        }
                        else if (!isTimerAction) {
                            const expectedMethodName = (0, task_1.getName)(ctx.createTimer);
                            throw (0, _1.getWrongActionTypeError)(timerId, expectedMethodName, action);
                        }
                    }
                    break;
                case pb.HistoryEvent.EventtypeCase.TIMERFIRED:
                    {
                        const timerFiredEvent = event.getTimerfired();
                        const timerId = timerFiredEvent ? timerFiredEvent.getTimerid() : undefined;
                        let timerTask;
                        if (timerId) {
                            timerTask = ctx._pendingTasks[timerId];
                            delete ctx._pendingTasks[timerId];
                        }
                        if (!timerTask) {
                            // TODO: Should this be an error? When would it ever happen?
                            if (!ctx._isReplaying) {
                                console.warn(`${ctx._instanceId}: Ignoring unexpected timerFired event with ID = ${timerId}`);
                            }
                            return;
                        }
                        timerTask.complete(undefined);
                        await ctx.resume();
                    }
                    break;
                // This history event confirms that the activity execution was successfully scheduled. Remove the taskscheduled event from the pending action list so we don't schedule it again.
                case pb.HistoryEvent.EventtypeCase.TASKSCHEDULED:
                    {
                        const taskId = event.getEventid();
                        const action = ctx._pendingActions[taskId];
                        delete ctx._pendingActions[taskId];
                        const isScheduleTaskAction = action?.hasScheduletask();
                        if (!action) {
                            throw (0, _1.getNonDeterminismError)(taskId, (0, task_1.getName)(ctx.callActivity));
                        }
                        else if (!isScheduleTaskAction) {
                            const expectedMethodName = (0, task_1.getName)(ctx.callActivity);
                            throw (0, _1.getWrongActionTypeError)(taskId, expectedMethodName, action);
                        }
                        else if (action.getScheduletask()?.getName() != event.getTaskscheduled()?.getName()) {
                            throw (0, _1.getWrongActionNameError)(taskId, (0, task_1.getName)(ctx.callActivity), event.getTaskscheduled()?.getName(), action.getScheduletask()?.getName());
                        }
                    }
                    break;
                // This history event contains the result of a completed activity task
                case pb.HistoryEvent.EventtypeCase.TASKCOMPLETED:
                    {
                        const taskCompletedEvent = event.getTaskcompleted();
                        const taskId = taskCompletedEvent ? taskCompletedEvent.getTaskscheduledid() : undefined;
                        let activityTask;
                        if (taskId) {
                            activityTask = ctx._pendingTasks[taskId];
                            delete ctx._pendingTasks[taskId];
                        }
                        if (!activityTask) {
                            // TODO: Should this be an error? When would it ever happen?
                            if (!ctx._isReplaying) {
                                console.warn(`${ctx._instanceId}: Ignoring unexpected taskCompleted event with ID = ${taskId}`);
                            }
                            return;
                        }
                        let result;
                        if (!(0, pb_helper_util_1.isEmpty)(event.getTaskcompleted()?.getResult())) {
                            result = JSON.parse(event.getTaskcompleted()?.getResult()?.toString() || "");
                        }
                        activityTask.complete(result);
                        await ctx.resume();
                    }
                    break;
                case pb.HistoryEvent.EventtypeCase.TASKFAILED:
                    {
                        const taskFailedEvent = event.getTaskfailed();
                        const taskId = taskFailedEvent ? taskFailedEvent.getTaskscheduledid() : undefined;
                        let activityTask;
                        if (taskId) {
                            activityTask = ctx._pendingTasks[taskId];
                            delete ctx._pendingTasks[taskId];
                        }
                        if (!activityTask) {
                            // TODO: Should this be an error? When would it ever happen?
                            if (!ctx._isReplaying) {
                                console.warn(`${ctx._instanceId}: Ignoring unexpected taskFailed event with ID = ${taskId}`);
                            }
                            return;
                        }
                        activityTask.fail(`${ctx._instanceId}: Activity task #${taskId} failed: ${event
                            .getTaskfailed()
                            ?.getFailuredetails()
                            ?.getErrormessage()}`, event.getTaskfailed()?.getFailuredetails());
                        await ctx.resume();
                    }
                    break;
                // This history event confirms that the sub-orcehstration execution was successfully scheduled. Remove the subOrchestrationInstanceCreated event from the pending action list so we don't schedule it again.
                case pb.HistoryEvent.EventtypeCase.SUBORCHESTRATIONINSTANCECREATED:
                    {
                        const taskId = event.getEventid();
                        const action = ctx._pendingActions[taskId];
                        delete ctx._pendingActions[taskId];
                        const isCreateSubOrchestrationAction = action?.hasCreatesuborchestration();
                        if (!action) {
                            throw (0, _1.getNonDeterminismError)(taskId, (0, task_1.getName)(ctx.callSubOrchestrator));
                        }
                        else if (!isCreateSubOrchestrationAction) {
                            const expectedMethodName = (0, task_1.getName)(ctx.callSubOrchestrator);
                            throw (0, _1.getWrongActionTypeError)(taskId, expectedMethodName, action);
                        }
                        else if (action.getCreatesuborchestration()?.getName() != event.getSuborchestrationinstancecreated()?.getName()) {
                            throw (0, _1.getWrongActionNameError)(taskId, (0, task_1.getName)(ctx.callSubOrchestrator), action.getCreatesuborchestration()?.getName(), action.getCreatesuborchestration()?.getName());
                        }
                    }
                    break;
                case pb.HistoryEvent.EventtypeCase.SUBORCHESTRATIONINSTANCECOMPLETED:
                    {
                        const subOrchestrationInstanceCompletedEvent = event.getSuborchestrationinstancecompleted();
                        const taskId = subOrchestrationInstanceCompletedEvent
                            ? subOrchestrationInstanceCompletedEvent.getTaskscheduledid()
                            : undefined;
                        let subOrchTask;
                        if (taskId) {
                            subOrchTask = ctx._pendingTasks[taskId];
                            delete ctx._pendingTasks[taskId];
                        }
                        let result;
                        if (!(0, pb_helper_util_1.isEmpty)(event.getSuborchestrationinstancecompleted()?.getResult())) {
                            result = JSON.parse(event.getSuborchestrationinstancecompleted()?.getResult()?.toString() || "");
                        }
                        if (subOrchTask) {
                            subOrchTask.complete(result);
                        }
                        await ctx.resume();
                    }
                    break;
                case pb.HistoryEvent.EventtypeCase.SUBORCHESTRATIONINSTANCEFAILED:
                    {
                        const subOrchestrationInstanceFailedEvent = event.getSuborchestrationinstancefailed();
                        const taskId = subOrchestrationInstanceFailedEvent
                            ? subOrchestrationInstanceFailedEvent.getTaskscheduledid()
                            : undefined;
                        let subOrchTask;
                        if (taskId) {
                            subOrchTask = ctx._pendingTasks[taskId];
                            delete ctx._pendingTasks[taskId];
                        }
                        if (!subOrchTask) {
                            // TODO: Should this be an error? When would it ever happen?
                            if (!ctx._isReplaying) {
                                console.warn(`${ctx._instanceId}: Ignoring unexpected subOrchestrationInstanceFailed event with ID = ${taskId}`);
                            }
                            return;
                        }
                        subOrchTask.fail(`${ctx._instanceId}: Sub-orchestration task #${taskId} failed: ${event
                            .getSuborchestrationinstancefailed()
                            ?.getFailuredetails()
                            ?.getErrormessage()}`, event.getSuborchestrationinstancefailed()?.getFailuredetails());
                        await ctx.resume();
                    }
                    break;
                case pb.HistoryEvent.EventtypeCase.EVENTRAISED:
                    {
                        // Event names are case-insensitive
                        const eventName = event.getEventraised()?.getName()?.toLowerCase();
                        if (!ctx._isReplaying) {
                            console.log(`${ctx._instanceId}: Event raised: ${eventName}`);
                        }
                        let taskList;
                        if (eventName) {
                            taskList = ctx._pendingEvents[eventName];
                        }
                        let decodedResult;
                        if (taskList) {
                            const eventTask = taskList.shift();
                            if (!(0, pb_helper_util_1.isEmpty)(event.getEventraised()?.getInput())) {
                                decodedResult = JSON.parse(event.getEventraised()?.getInput()?.toString() || "");
                            }
                            if (eventTask) {
                                eventTask.complete(decodedResult);
                            }
                            if (!taskList && eventName) {
                                delete ctx._pendingEvents[eventName];
                            }
                            await ctx.resume();
                        }
                        else {
                            // Buffer the event
                            let eventList = [];
                            if (eventName) {
                                eventList = ctx._receivedEvents[eventName];
                                if (!eventList?.length) {
                                    eventList = [];
                                    ctx._receivedEvents[eventName] = eventList;
                                }
                            }
                            if (!(0, pb_helper_util_1.isEmpty)(event.getEventraised()?.getInput())) {
                                decodedResult = JSON.parse(event.getEventraised()?.getInput()?.toString() || "");
                            }
                            eventList?.push(decodedResult);
                            if (!ctx._isReplaying) {
                                console.log(`${ctx._instanceId}: Event ${eventName} has been buffered as there are no tasks waiting for it.`);
                            }
                        }
                    }
                    break;
                case pb.HistoryEvent.EventtypeCase.EXECUTIONSUSPENDED:
                    {
                        if (!this._isSuspended && !ctx._isReplaying) {
                            console.log(`${ctx._instanceId}: Execution suspended`);
                        }
                        this._isSuspended = true;
                    }
                    break;
                case pb.HistoryEvent.EventtypeCase.EXECUTIONRESUMED:
                    if (!this._isSuspended) {
                        return;
                    }
                    this._isSuspended = false;
                    for (const e of this._suspendedEvents) {
                        await this.processEvent(ctx, e);
                    }
                    this._suspendedEvents = [];
                    break;
                case pb.HistoryEvent.EventtypeCase.EXECUTIONTERMINATED: {
                    if (!ctx._isReplaying) {
                        console.log(`${ctx._instanceId}: Execution terminated`);
                    }
                    let encodedOutput;
                    if (!(0, pb_helper_util_1.isEmpty)(event.getExecutionterminated()?.getInput())) {
                        encodedOutput = event.getExecutionterminated()?.getInput()?.getValue();
                    }
                    ctx.setComplete(encodedOutput, pb.OrchestrationStatus.ORCHESTRATION_STATUS_TERMINATED, true);
                    break;
                }
                default:
                    console.info(`Unknown history event type: ${eventTypeName} (value: ${eventType}), skipping...`);
                // throw new OrchestrationStateError(`Unknown history event type: ${eventTypeName} (value: ${eventType})`);
            }
        }
        catch (e) {
            // StopIteration is thrown when the generator is finished and didn't return a task as its next action
            if (e instanceof stop_iteration_error_1.StopIterationError) {
                ctx.setComplete(e.value, pb.OrchestrationStatus.ORCHESTRATION_STATUS_COMPLETED);
                return;
            }
            // For the rest we don't do anything
            // Else we throw it upwards
            console.error(`Could not process the event ${eventTypeName} due to error ${e}`);
            throw e;
        }
    }
}
exports.OrchestrationExecutor = OrchestrationExecutor;

// SIG // Begin signature block
// SIG // MIInzAYJKoZIhvcNAQcCoIInvTCCJ7kCAQExDzANBglg
// SIG // hkgBZQMEAgEFADB3BgorBgEEAYI3AgEEoGkwZzAyBgor
// SIG // BgEEAYI3AgEeMCQCAQEEEBDgyQbOONQRoqMAEEvTUJAC
// SIG // AQACAQACAQACAQACAQAwMTANBglghkgBZQMEAgEFAAQg
// SIG // NI97+adMFmyQSGeqA9kxL94CnKALIJL6YN7hGI7o43+g
// SIG // gg2FMIIGAzCCA+ugAwIBAgITMwAAA64tNVHIU49VHQAA
// SIG // AAADrjANBgkqhkiG9w0BAQsFADB+MQswCQYDVQQGEwJV
// SIG // UzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMH
// SIG // UmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBv
// SIG // cmF0aW9uMSgwJgYDVQQDEx9NaWNyb3NvZnQgQ29kZSBT
// SIG // aWduaW5nIFBDQSAyMDExMB4XDTIzMTExNjE5MDg1OVoX
// SIG // DTI0MTExNDE5MDg1OVowdDELMAkGA1UEBhMCVVMxEzAR
// SIG // BgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1v
// SIG // bmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlv
// SIG // bjEeMBwGA1UEAxMVTWljcm9zb2Z0IENvcnBvcmF0aW9u
// SIG // MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA
// SIG // 9CD8pjY3wxCoPmMhOkow7ycCltfqYnqk4wGNApzh2dTY
// SIG // +YqxozWTzJUOB38VxsgFQmXBFhOMdrGYGpvO9kdbNPkw
// SIG // HpTrW6hZqFuLLiRwGKEx4ZM5zVSqbHJuX2fPfUJ0Xmb+
// SIG // VrVsGw/BwBV2zz0rVtiSgqj3GeeGOsG7llfWyrSjyJqm
// SIG // 5DHE3o04BAI/NuhkHOv04euiqJGvHFCL8+fXvyD9OAxq
// SIG // 4fcJKtoyBb0PBA3oMNQeCsiUyLO+voZqVTOUsAWY0bN5
// SIG // YjkK4nq5DVaNdVrrowd5AX9gmz6D/TJTssns6pDCG00Y
// SIG // +Dh3ipWpnVmkhYcByyUSEKX3PLC8DkiAQQIDAQABo4IB
// SIG // gjCCAX4wHwYDVR0lBBgwFgYKKwYBBAGCN0wIAQYIKwYB
// SIG // BQUHAwMwHQYDVR0OBBYEFIcf73Spl4cHOFoll27H9COd
// SIG // 4fE/MFQGA1UdEQRNMEukSTBHMS0wKwYDVQQLEyRNaWNy
// SIG // b3NvZnQgSXJlbGFuZCBPcGVyYXRpb25zIExpbWl0ZWQx
// SIG // FjAUBgNVBAUTDTIzMDAxMis1MDE4MzYwHwYDVR0jBBgw
// SIG // FoAUSG5k5VAF04KqFzc3IrVtqMp1ApUwVAYDVR0fBE0w
// SIG // SzBJoEegRYZDaHR0cDovL3d3dy5taWNyb3NvZnQuY29t
// SIG // L3BraW9wcy9jcmwvTWljQ29kU2lnUENBMjAxMV8yMDEx
// SIG // LTA3LTA4LmNybDBhBggrBgEFBQcBAQRVMFMwUQYIKwYB
// SIG // BQUHMAKGRWh0dHA6Ly93d3cubWljcm9zb2Z0LmNvbS9w
// SIG // a2lvcHMvY2VydHMvTWljQ29kU2lnUENBMjAxMV8yMDEx
// SIG // LTA3LTA4LmNydDAMBgNVHRMBAf8EAjAAMA0GCSqGSIb3
// SIG // DQEBCwUAA4ICAQBqyWA1Eu7PKNMjaaxl0V7gJ0XBysUo
// SIG // xZluMHJXFE2LEGZIZ2zMLYVjOnAGG/4dluRjSrZZo/8v
// SIG // wk4Xt8v6NBB9ofo8H1P/XidHytWTv9lg9MYu++6lPmu5
// SIG // fCozD3cI2NLZPW2BBhGX2D0R8tQBj0FbmZRuIucpiQ7D
// SIG // K3CHKlfKcc7MP8pPzuMv55Tox8+KFQD1NG6+bfbYA/BN
// SIG // PBkg4tyOh+exbaHfcNuodDJUIjq9dF6oa+Yjy0u0pUMI
// SIG // /B1t+8m6rJo0KSoZlrpesYl0jRhpt+hmqx8uENXoGJcY
// SIG // ZVJ5N2Skq90LViKNRhi9N4U+e8c4y9uXyomUF/6viCPJ
// SIG // 7huTNEJo75ehIJba+IWd3txUEc0R3y6DT6txC6cW1nR/
// SIG // LTbo9I/8fQq538G5IvJ+e5iSiOSVVkVk0i5m03Awy5E2
// SIG // ZSS4PVdQSCcFxmN4tpEfYuR7AAy/GJVtIDFlUpSgdXok
// SIG // pSui5hYtK1R9enXXvo+U/xGkLRc+qp4De3dZbzu7pOq7
// SIG // V/jCyhuCw0bEIAU4urCGIip7TI6GBRzD7yPzjFIqeZY7
// SIG // S4rVW5BRn2oEqpm8Su6yTIQvMIk8x2pwYNUa2339Z4gW
// SIG // 5xW21eFA5mLpo7NRSKRQms5OgAA18aCgqOU7Ds0h6q/Y
// SIG // B4BmEAtoTMl/TBiyKaMGAlEcdy+5FIhmzojMGjCCB3ow
// SIG // ggVioAMCAQICCmEOkNIAAAAAAAMwDQYJKoZIhvcNAQEL
// SIG // BQAwgYgxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNo
// SIG // aW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQK
// SIG // ExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xMjAwBgNVBAMT
// SIG // KU1pY3Jvc29mdCBSb290IENlcnRpZmljYXRlIEF1dGhv
// SIG // cml0eSAyMDExMB4XDTExMDcwODIwNTkwOVoXDTI2MDcw
// SIG // ODIxMDkwOVowfjELMAkGA1UEBhMCVVMxEzARBgNVBAgT
// SIG // Cldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAc
// SIG // BgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEoMCYG
// SIG // A1UEAxMfTWljcm9zb2Z0IENvZGUgU2lnbmluZyBQQ0Eg
// SIG // MjAxMTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoC
// SIG // ggIBAKvw+nIQHC6t2G6qghBNNLrytlghn0IbKmvpWlCq
// SIG // uAY4GgRJun/DDB7dN2vGEtgL8DjCmQawyDnVARQxQtOJ
// SIG // DXlkh36UYCRsr55JnOloXtLfm1OyCizDr9mpK656Ca/X
// SIG // llnKYBoF6WZ26DJSJhIv56sIUM+zRLdd2MQuA3WraPPL
// SIG // bfM6XKEW9Ea64DhkrG5kNXimoGMPLdNAk/jj3gcN1Vx5
// SIG // pUkp5w2+oBN3vpQ97/vjK1oQH01WKKJ6cuASOrdJXtjt
// SIG // 7UORg9l7snuGG9k+sYxd6IlPhBryoS9Z5JA7La4zWMW3
// SIG // Pv4y07MDPbGyr5I4ftKdgCz1TlaRITUlwzluZH9TupwP
// SIG // rRkjhMv0ugOGjfdf8NBSv4yUh7zAIXQlXxgotswnKDgl
// SIG // mDlKNs98sZKuHCOnqWbsYR9q4ShJnV+I4iVd0yFLPlLE
// SIG // tVc/JAPw0XpbL9Uj43BdD1FGd7P4AOG8rAKCX9vAFbO9
// SIG // G9RVS+c5oQ/pI0m8GLhEfEXkwcNyeuBy5yTfv0aZxe/C
// SIG // HFfbg43sTUkwp6uO3+xbn6/83bBm4sGXgXvt1u1L50kp
// SIG // pxMopqd9Z4DmimJ4X7IvhNdXnFy/dygo8e1twyiPLI9A
// SIG // N0/B4YVEicQJTMXUpUMvdJX3bvh4IFgsE11glZo+TzOE
// SIG // 2rCIF96eTvSWsLxGoGyY0uDWiIwLAgMBAAGjggHtMIIB
// SIG // 6TAQBgkrBgEEAYI3FQEEAwIBADAdBgNVHQ4EFgQUSG5k
// SIG // 5VAF04KqFzc3IrVtqMp1ApUwGQYJKwYBBAGCNxQCBAwe
// SIG // CgBTAHUAYgBDAEEwCwYDVR0PBAQDAgGGMA8GA1UdEwEB
// SIG // /wQFMAMBAf8wHwYDVR0jBBgwFoAUci06AjGQQ7kUBU7h
// SIG // 6qfHMdEjiTQwWgYDVR0fBFMwUTBPoE2gS4ZJaHR0cDov
// SIG // L2NybC5taWNyb3NvZnQuY29tL3BraS9jcmwvcHJvZHVj
// SIG // dHMvTWljUm9vQ2VyQXV0MjAxMV8yMDExXzAzXzIyLmNy
// SIG // bDBeBggrBgEFBQcBAQRSMFAwTgYIKwYBBQUHMAKGQmh0
// SIG // dHA6Ly93d3cubWljcm9zb2Z0LmNvbS9wa2kvY2VydHMv
// SIG // TWljUm9vQ2VyQXV0MjAxMV8yMDExXzAzXzIyLmNydDCB
// SIG // nwYDVR0gBIGXMIGUMIGRBgkrBgEEAYI3LgMwgYMwPwYI
// SIG // KwYBBQUHAgEWM2h0dHA6Ly93d3cubWljcm9zb2Z0LmNv
// SIG // bS9wa2lvcHMvZG9jcy9wcmltYXJ5Y3BzLmh0bTBABggr
// SIG // BgEFBQcCAjA0HjIgHQBMAGUAZwBhAGwAXwBwAG8AbABp
// SIG // AGMAeQBfAHMAdABhAHQAZQBtAGUAbgB0AC4gHTANBgkq
// SIG // hkiG9w0BAQsFAAOCAgEAZ/KGpZjgVHkaLtPYdGcimwuW
// SIG // EeFjkplCln3SeQyQwWVfLiw++MNy0W2D/r4/6ArKO79H
// SIG // qaPzadtjvyI1pZddZYSQfYtGUFXYDJJ80hpLHPM8QotS
// SIG // 0LD9a+M+By4pm+Y9G6XUtR13lDni6WTJRD14eiPzE32m
// SIG // kHSDjfTLJgJGKsKKELukqQUMm+1o+mgulaAqPyprWElj
// SIG // HwlpblqYluSD9MCP80Yr3vw70L01724lruWvJ+3Q3fMO
// SIG // r5kol5hNDj0L8giJ1h/DMhji8MUtzluetEk5CsYKwsat
// SIG // ruWy2dsViFFFWDgycScaf7H0J/jeLDogaZiyWYlobm+n
// SIG // t3TDQAUGpgEqKD6CPxNNZgvAs0314Y9/HG8VfUWnduVA
// SIG // KmWjw11SYobDHWM2l4bf2vP48hahmifhzaWX0O5dY0Hj
// SIG // Wwechz4GdwbRBrF1HxS+YWG18NzGGwS+30HHDiju3mUv
// SIG // 7Jf2oVyW2ADWoUa9WfOXpQlLSBCZgB/QACnFsZulP0V3
// SIG // HjXG0qKin3p6IvpIlR+r+0cjgPWe+L9rt0uX4ut1eBrs
// SIG // 6jeZeRhL/9azI2h15q/6/IvrC4DqaTuv/DDtBEyO3991
// SIG // bWORPdGdVk5Pv4BXIqF4ETIheu9BCrE/+6jMpF3BoYib
// SIG // V3FWTkhFwELJm3ZbCoBIa/15n8G9bW1qyVJzEw16UM0x
// SIG // ghmfMIIZmwIBATCBlTB+MQswCQYDVQQGEwJVUzETMBEG
// SIG // A1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9u
// SIG // ZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9u
// SIG // MSgwJgYDVQQDEx9NaWNyb3NvZnQgQ29kZSBTaWduaW5n
// SIG // IFBDQSAyMDExAhMzAAADri01UchTj1UdAAAAAAOuMA0G
// SIG // CWCGSAFlAwQCAQUAoIGuMBkGCSqGSIb3DQEJAzEMBgor
// SIG // BgEEAYI3AgEEMBwGCisGAQQBgjcCAQsxDjAMBgorBgEE
// SIG // AYI3AgEVMC8GCSqGSIb3DQEJBDEiBCDKasox0lxclex3
// SIG // wXx2EdKauwfqUBt4Ac9UE5lElbwk1zBCBgorBgEEAYI3
// SIG // AgEMMTQwMqAUgBIATQBpAGMAcgBvAHMAbwBmAHShGoAY
// SIG // aHR0cDovL3d3dy5taWNyb3NvZnQuY29tMA0GCSqGSIb3
// SIG // DQEBAQUABIIBAGdPxMTEO8Xcf+QLKf0yMf9Ty5u9Oizj
// SIG // SHAZrYS/wHDGVZSpY47M1Wjjc0o1wsLhFCtfa+PRb/b1
// SIG // +2vagPG/P9JbraHQScjcoKqNux0AQ9UxriW4gIdYU/ZV
// SIG // Gy4Tgy9mHiMge4/SaIb50JNjWzrpOE0692g2B2/Vl7Yi
// SIG // O24FMkenQH/jba+xfx38jb7ulQqPqHLIN8CpXpkOBWmk
// SIG // Lm/hKDYT1PfYbjlNhPgKl0SSDktfO0DHuYtDC6mv3It1
// SIG // WJwSw74W63pTsf9Ghq6ztuVpbf7bPi/RM6iWqPe6ZHSg
// SIG // eLT1NJpMfnEJVWtXigFrfIdgBghlPfytXvv7u07gfZlw
// SIG // aaShghcpMIIXJQYKKwYBBAGCNwMDATGCFxUwghcRBgkq
// SIG // hkiG9w0BBwKgghcCMIIW/gIBAzEPMA0GCWCGSAFlAwQC
// SIG // AQUAMIIBWQYLKoZIhvcNAQkQAQSgggFIBIIBRDCCAUAC
// SIG // AQEGCisGAQQBhFkKAwEwMTANBglghkgBZQMEAgEFAAQg
// SIG // U6EA28ww2mjVhfLZzSbjKNIRPLSv9Bjs3cng9POU5BQC
// SIG // BmWC1bHbdxgTMjAyNDAxMDgxODE1NDcuNjEzWjAEgAIB
// SIG // 9KCB2KSB1TCB0jELMAkGA1UEBhMCVVMxEzARBgNVBAgT
// SIG // Cldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAc
// SIG // BgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEtMCsG
// SIG // A1UECxMkTWljcm9zb2Z0IElyZWxhbmQgT3BlcmF0aW9u
// SIG // cyBMaW1pdGVkMSYwJAYDVQQLEx1UaGFsZXMgVFNTIEVT
// SIG // TjoyQUQ0LTRCOTItRkEwMTElMCMGA1UEAxMcTWljcm9z
// SIG // b2Z0IFRpbWUtU3RhbXAgU2VydmljZaCCEXgwggcnMIIF
// SIG // D6ADAgECAhMzAAAB3p5InpafKEQ9AAEAAAHeMA0GCSqG
// SIG // SIb3DQEBCwUAMHwxCzAJBgNVBAYTAlVTMRMwEQYDVQQI
// SIG // EwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4w
// SIG // HAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xJjAk
// SIG // BgNVBAMTHU1pY3Jvc29mdCBUaW1lLVN0YW1wIFBDQSAy
// SIG // MDEwMB4XDTIzMTAxMjE5MDcxMloXDTI1MDExMDE5MDcx
// SIG // MlowgdIxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNo
// SIG // aW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQK
// SIG // ExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xLTArBgNVBAsT
// SIG // JE1pY3Jvc29mdCBJcmVsYW5kIE9wZXJhdGlvbnMgTGlt
// SIG // aXRlZDEmMCQGA1UECxMdVGhhbGVzIFRTUyBFU046MkFE
// SIG // NC00QjkyLUZBMDExJTAjBgNVBAMTHE1pY3Jvc29mdCBU
// SIG // aW1lLVN0YW1wIFNlcnZpY2UwggIiMA0GCSqGSIb3DQEB
// SIG // AQUAA4ICDwAwggIKAoICAQC0gfQchfVCA4QOsRazp4sP
// SIG // 8bA5fLEovazgjl0kjuFTEI5zRgKOVR8dIoozBDB/S2Nk
// SIG // lCAZFUEtDJepEfk2oJFD22hKcI4UNZqa4UYCU/45Up4n
// SIG // ONlQwKNHp+CSOsZ16AKFqCskmPP0TiCnaaYYCOziW+Fx
// SIG // 5NT97F9qTWd9iw2NZLXIStf4Vsj5W5WlwB0btBN8p78K
// SIG // 0vP23KKwDTug47srMkvc1Jq/sNx9wBL0oLNkXri49qZA
// SIG // XH1tVDwhbnS3eyD2dkQuKHUHBD52Ndo8qWD50usmQLNK
// SIG // S6atCkRVMgdcesejlO97LnYhzjdephNJeiy0/TphqNEv
// SIG // eAcYNzf92hOn1G51aHplXOxZBS7pvCpGXG0O3Dh0gFhi
// SIG // cXQr6OTrVLUXUqn/ORZJQlyCJIOLJu5zPU5LVFXztJKe
// SIG // pMe5srIA9EK8cev+aGqp8Dk1izcyvgQotRu51A9abXrl
// SIG // 70KfHxNSqU45xv9TiXnocCjTT4xrffFdAZqIGU3t0sQZ
// SIG // DnjkMiwPvuR8oPy+vKXvg62aGT1yWhlP4gYhZi/rpfzo
// SIG // t3fN8ywB5R0Jh/1RjQX0cD/osb6ocpPxHm8Ll1SWPq08
// SIG // n20X7ofZ9AGjIYTccYOrRismUuBABIg8axfZgGRMvHvK
// SIG // 3+nZSiF+Xd2kC6PXw3WtWUzsPlwHAL49vzdwy1RmZR5x
// SIG // 5QIDAQABo4IBSTCCAUUwHQYDVR0OBBYEFGswJm8bHmmq
// SIG // YHccyvDrPp2j0BLIMB8GA1UdIwQYMBaAFJ+nFV0AXmJd
// SIG // g/Tl0mWnG1M1GelyMF8GA1UdHwRYMFYwVKBSoFCGTmh0
// SIG // dHA6Ly93d3cubWljcm9zb2Z0LmNvbS9wa2lvcHMvY3Js
// SIG // L01pY3Jvc29mdCUyMFRpbWUtU3RhbXAlMjBQQ0ElMjAy
// SIG // MDEwKDEpLmNybDBsBggrBgEFBQcBAQRgMF4wXAYIKwYB
// SIG // BQUHMAKGUGh0dHA6Ly93d3cubWljcm9zb2Z0LmNvbS9w
// SIG // a2lvcHMvY2VydHMvTWljcm9zb2Z0JTIwVGltZS1TdGFt
// SIG // cCUyMFBDQSUyMDIwMTAoMSkuY3J0MAwGA1UdEwEB/wQC
// SIG // MAAwFgYDVR0lAQH/BAwwCgYIKwYBBQUHAwgwDgYDVR0P
// SIG // AQH/BAQDAgeAMA0GCSqGSIb3DQEBCwUAA4ICAQDilMB7
// SIG // Fw2nBjr1CILORw4D7NC2dash0ugusHypS2g9+rWX21rd
// SIG // cfhjIms0rsvhrMYlR85ITFvhaivIK7i0Fjf7Dgl/nxlI
// SIG // E/S09tXESKXGY+P2RSL8LZAXLAs9VxFLF2DkiVD4rWOx
// SIG // PG25XZpoWGdvafl0KSHLBv6vmI5KgVvZsNK7tTH8TE0L
// SIG // PTEw4g9vIAFRqzwNzcpIkgob3aku1V/vy3BM/VG87aP8
// SIG // NvFgPBzgh6gU2w0R5oj+zCI/kkJiPVSGsmLCBkY73pZj
// SIG // WtDr21PQiUs/zXzBIH9jRzGVGFvCqlhIyIz3xyCsVpTT
// SIG // GIbln1kUh2QisiADQNGiS+LKB0Lc82djJzX42GPOdcB2
// SIG // IxoMFI/4ZS0YEDuUt9Gce/BqgSn8paduWjlif6j4Qvg1
// SIG // zNoF2oyF25fo6RnFQDcLRRbowiUXWW3h9UfkONRY4AYO
// SIG // JtzkxQxqLeQ0rlZEII5Lu6TlT7ZXROOkJQ4P9loT6U0M
// SIG // Vx+uLD9Rn5AMFLbeq62TPzwsERuoIq2Jp00Sy7InAYaG
// SIG // C4fhBBY1b4lwBk5OqZ7vI8f+Fj1rtI7M+8hc4PNvxTKg
// SIG // pPcCty78iwMgxzfhcWxwMbYMGne6C0DzNFhhEXQdbpjw
// SIG // iImLEn/4+/RKh3aDcEGETlZvmV9dEV95+m0ZgJ7JHjYY
// SIG // tMJ1WnlaICzHRg/p6jCCB3EwggVZoAMCAQICEzMAAAAV
// SIG // xedrngKbSZkAAAAAABUwDQYJKoZIhvcNAQELBQAwgYgx
// SIG // CzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9u
// SIG // MRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNy
// SIG // b3NvZnQgQ29ycG9yYXRpb24xMjAwBgNVBAMTKU1pY3Jv
// SIG // c29mdCBSb290IENlcnRpZmljYXRlIEF1dGhvcml0eSAy
// SIG // MDEwMB4XDTIxMDkzMDE4MjIyNVoXDTMwMDkzMDE4MzIy
// SIG // NVowfDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hp
// SIG // bmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoT
// SIG // FU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEmMCQGA1UEAxMd
// SIG // TWljcm9zb2Z0IFRpbWUtU3RhbXAgUENBIDIwMTAwggIi
// SIG // MA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQDk4aZM
// SIG // 57RyIQt5osvXJHm9DtWC0/3unAcH0qlsTnXIyjVX9gF/
// SIG // bErg4r25PhdgM/9cT8dm95VTcVrifkpa/rg2Z4VGIwy1
// SIG // jRPPdzLAEBjoYH1qUoNEt6aORmsHFPPFdvWGUNzBRMhx
// SIG // XFExN6AKOG6N7dcP2CZTfDlhAnrEqv1yaa8dq6z2Nr41
// SIG // JmTamDu6GnszrYBbfowQHJ1S/rboYiXcag/PXfT+jlPP
// SIG // 1uyFVk3v3byNpOORj7I5LFGc6XBpDco2LXCOMcg1KL3j
// SIG // tIckw+DJj361VI/c+gVVmG1oO5pGve2krnopN6zL64NF
// SIG // 50ZuyjLVwIYwXE8s4mKyzbnijYjklqwBSru+cakXW2dg
// SIG // 3viSkR4dPf0gz3N9QZpGdc3EXzTdEonW/aUgfX782Z5F
// SIG // 37ZyL9t9X4C626p+Nuw2TPYrbqgSUei/BQOj0XOmTTd0
// SIG // lBw0gg/wEPK3Rxjtp+iZfD9M269ewvPV2HM9Q07BMzlM
// SIG // jgK8QmguEOqEUUbi0b1qGFphAXPKZ6Je1yh2AuIzGHLX
// SIG // pyDwwvoSCtdjbwzJNmSLW6CmgyFdXzB0kZSU2LlQ+QuJ
// SIG // YfM2BjUYhEfb3BvR/bLUHMVr9lxSUV0S2yW6r1AFemzF
// SIG // ER1y7435UsSFF5PAPBXbGjfHCBUYP3irRbb1Hode2o+e
// SIG // FnJpxq57t7c+auIurQIDAQABo4IB3TCCAdkwEgYJKwYB
// SIG // BAGCNxUBBAUCAwEAATAjBgkrBgEEAYI3FQIEFgQUKqdS
// SIG // /mTEmr6CkTxGNSnPEP8vBO4wHQYDVR0OBBYEFJ+nFV0A
// SIG // XmJdg/Tl0mWnG1M1GelyMFwGA1UdIARVMFMwUQYMKwYB
// SIG // BAGCN0yDfQEBMEEwPwYIKwYBBQUHAgEWM2h0dHA6Ly93
// SIG // d3cubWljcm9zb2Z0LmNvbS9wa2lvcHMvRG9jcy9SZXBv
// SIG // c2l0b3J5Lmh0bTATBgNVHSUEDDAKBggrBgEFBQcDCDAZ
// SIG // BgkrBgEEAYI3FAIEDB4KAFMAdQBiAEMAQTALBgNVHQ8E
// SIG // BAMCAYYwDwYDVR0TAQH/BAUwAwEB/zAfBgNVHSMEGDAW
// SIG // gBTV9lbLj+iiXGJo0T2UkFvXzpoYxDBWBgNVHR8ETzBN
// SIG // MEugSaBHhkVodHRwOi8vY3JsLm1pY3Jvc29mdC5jb20v
// SIG // cGtpL2NybC9wcm9kdWN0cy9NaWNSb29DZXJBdXRfMjAx
// SIG // MC0wNi0yMy5jcmwwWgYIKwYBBQUHAQEETjBMMEoGCCsG
// SIG // AQUFBzAChj5odHRwOi8vd3d3Lm1pY3Jvc29mdC5jb20v
// SIG // cGtpL2NlcnRzL01pY1Jvb0NlckF1dF8yMDEwLTA2LTIz
// SIG // LmNydDANBgkqhkiG9w0BAQsFAAOCAgEAnVV9/Cqt4Swf
// SIG // ZwExJFvhnnJL/Klv6lwUtj5OR2R4sQaTlz0xM7U518Jx
// SIG // Nj/aZGx80HU5bbsPMeTCj/ts0aGUGCLu6WZnOlNN3Zi6
// SIG // th542DYunKmCVgADsAW+iehp4LoJ7nvfam++Kctu2D9I
// SIG // dQHZGN5tggz1bSNU5HhTdSRXud2f8449xvNo32X2pFaq
// SIG // 95W2KFUn0CS9QKC/GbYSEhFdPSfgQJY4rPf5KYnDvBew
// SIG // VIVCs/wMnosZiefwC2qBwoEZQhlSdYo2wh3DYXMuLGt7
// SIG // bj8sCXgU6ZGyqVvfSaN0DLzskYDSPeZKPmY7T7uG+jIa
// SIG // 2Zb0j/aRAfbOxnT99kxybxCrdTDFNLB62FD+CljdQDzH
// SIG // VG2dY3RILLFORy3BFARxv2T5JL5zbcqOCb2zAVdJVGTZ
// SIG // c9d/HltEAY5aGZFrDZ+kKNxnGSgkujhLmm77IVRrakUR
// SIG // R6nxt67I6IleT53S0Ex2tVdUCbFpAUR+fKFhbHP+Crvs
// SIG // QWY9af3LwUFJfn6Tvsv4O+S3Fb+0zj6lMVGEvL8CwYKi
// SIG // excdFYmNcP7ntdAoGokLjzbaukz5m/8K6TT4JDVnK+AN
// SIG // uOaMmdbhIurwJ0I9JZTmdHRbatGePu1+oDEzfbzL6Xu/
// SIG // OHBE0ZDxyKs6ijoIYn/ZcGNTTY3ugm2lBRDBcQZqELQd
// SIG // VTNYs6FwZvKhggLUMIICPQIBATCCAQChgdikgdUwgdIx
// SIG // CzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9u
// SIG // MRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNy
// SIG // b3NvZnQgQ29ycG9yYXRpb24xLTArBgNVBAsTJE1pY3Jv
// SIG // c29mdCBJcmVsYW5kIE9wZXJhdGlvbnMgTGltaXRlZDEm
// SIG // MCQGA1UECxMdVGhhbGVzIFRTUyBFU046MkFENC00Qjky
// SIG // LUZBMDExJTAjBgNVBAMTHE1pY3Jvc29mdCBUaW1lLVN0
// SIG // YW1wIFNlcnZpY2WiIwoBATAHBgUrDgMCGgMVAGigUorM
// SIG // uMvOqZfF8ttgiWRMRNrzoIGDMIGApH4wfDELMAkGA1UE
// SIG // BhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNV
// SIG // BAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBD
// SIG // b3Jwb3JhdGlvbjEmMCQGA1UEAxMdTWljcm9zb2Z0IFRp
// SIG // bWUtU3RhbXAgUENBIDIwMTAwDQYJKoZIhvcNAQEFBQAC
// SIG // BQDpRl8cMCIYDzIwMjQwMTA4MTk0NjM2WhgPMjAyNDAx
// SIG // MDkxOTQ2MzZaMHQwOgYKKwYBBAGEWQoEATEsMCowCgIF
// SIG // AOlGXxwCAQAwBwIBAAICGZAwBwIBAAICEdEwCgIFAOlH
// SIG // sJwCAQAwNgYKKwYBBAGEWQoEAjEoMCYwDAYKKwYBBAGE
// SIG // WQoDAqAKMAgCAQACAwehIKEKMAgCAQACAwGGoDANBgkq
// SIG // hkiG9w0BAQUFAAOBgQAFcFa5FTFXQSGMQS50N77hkKtK
// SIG // avNEQs5uQ2MtFCOM8TGrdEEQEC6YcWohMxr37wuW4CTi
// SIG // 2HTAVcFwPDg1WZC/0rZAxwiM00IK7Yi48BueIbdqssLo
// SIG // 1ueOg3z+JYjx9mkJFUlBRDTKAQVAW4bL6jD3hwYiwT/G
// SIG // FhDvPpSrtJVtuTGCBA0wggQJAgEBMIGTMHwxCzAJBgNV
// SIG // BAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYD
// SIG // VQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQg
// SIG // Q29ycG9yYXRpb24xJjAkBgNVBAMTHU1pY3Jvc29mdCBU
// SIG // aW1lLVN0YW1wIFBDQSAyMDEwAhMzAAAB3p5InpafKEQ9
// SIG // AAEAAAHeMA0GCWCGSAFlAwQCAQUAoIIBSjAaBgkqhkiG
// SIG // 9w0BCQMxDQYLKoZIhvcNAQkQAQQwLwYJKoZIhvcNAQkE
// SIG // MSIEIMlybHAX1e9tdM9LsR3o0MmbvgyrkWHGGWTTaAJ2
// SIG // u+iaMIH6BgsqhkiG9w0BCRACLzGB6jCB5zCB5DCBvQQg
// SIG // jj4jnw3BXhAQSQJ/5gtzIK0+cP1Ns/NS2A+OB3N+HXsw
// SIG // gZgwgYCkfjB8MQswCQYDVQQGEwJVUzETMBEGA1UECBMK
// SIG // V2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwG
// SIG // A1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSYwJAYD
// SIG // VQQDEx1NaWNyb3NvZnQgVGltZS1TdGFtcCBQQ0EgMjAx
// SIG // MAITMwAAAd6eSJ6WnyhEPQABAAAB3jAiBCDRfqxvomqq
// SIG // wv+Fsi3CkhIV/WKqDJVyB3BQ0s475ErvcDANBgkqhkiG
// SIG // 9w0BAQsFAASCAgCGx3nBhSxRxS8aEwFJgUA8SH2bYW62
// SIG // hZuN73BqIvA5JfRa/0zl/fq3oLjZ0TvzsC/P94XBv7b0
// SIG // lkFQ/SEHRKiUZeCmk77knwctjQ5XF3QuYrD83yjI7eWJ
// SIG // C3eMSm04y3S/Or8RyKj7hVR/LMdS7mPrsZY2mNii5FX3
// SIG // zycngBK3K5IF1JZGqU7rA7CQNa4KnXmGrZBSgb0UvBPb
// SIG // 5+do297SDi29UI1l5aPTe5FeWZS8WHtbiVHGAafYbV9K
// SIG // 45WZW7/rLeQ+4ynpRjuIOPOCIAPb0bv9fi2nSQuhW6v8
// SIG // 09oZLfSFHMMi8+LeSb9PFPf5FoZDF4PyLBGP6NrpCgnl
// SIG // BVHuaDfHiFwq9A1LZwOHuYB9jqFtLvx0JsaxIeJNLfnz
// SIG // /PUM1EmwTCBL6OMfbnmNyBSMZBSlTHQdUcORKEx3EjhG
// SIG // F7xMSJiEjBaNQO444G7ikqsXy+y0l0rAwBeSXMUl8su8
// SIG // jqahETNYTSxYLn6LYBuZT7iiQIqUlcd399l6H+OTo9br
// SIG // BfMB0dkQrY8GoSKf6KV0aAIlcF4P4wb15lhoRa6akjiz
// SIG // KdVIYEU9tzwq4kAeNCDXT03A0G7+bRrgITRgusGtp1Me
// SIG // QFiPSwNxEKJTLP9kXR3QP7C+DQgFvgi1bSFDZ9gip3Yi
// SIG // pmGSiJ3knxkdKOcxPS5qorHlZt7rx76xnyK//w==
// SIG // End signature block
