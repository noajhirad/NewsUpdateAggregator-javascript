"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TaskHubGrpcClient = void 0;
const wrappers_pb_1 = require("google-protobuf/google/protobuf/wrappers_pb");
const timestamp_pb_1 = require("google-protobuf/google/protobuf/timestamp_pb");
const pb = __importStar(require("../proto/orchestrator_service_pb"));
const task_1 = require("../task");
const crypto_1 = require("crypto");
const util_1 = require("util");
const orchestration_1 = require("../orchestration");
const client_grpc_1 = require("./client-grpc");
const orchestration_status_enum_1 = require("../orchestration/enum/orchestration-status.enum");
const timeout_error_1 = require("../exception/timeout-error");
const orchestration_purge_result_1 = require("../orchestration/orchestration-purge-result");
class TaskHubGrpcClient {
    constructor(hostAddress, option) {
        this._stub = new client_grpc_1.GrpcClient(hostAddress, option).stub;
    }
    async stop() {
        await this._stub.close();
        // Wait a bit to let the async operations finish
        // https://github.com/grpc/grpc-node/issues/1563#issuecomment-829483711
        await new Promise((resolve) => setTimeout(resolve, 1000));
    }
    /**
     * Schedules a new orchestrator using the DurableTask client.
     *
     * @param {TOrchestrator | string} orchestrator - The orchestrator or the name of the orchestrator to be scheduled.
     * @return {Promise<string>} A Promise resolving to the unique ID of the scheduled orchestrator instance.
     */
    async scheduleNewOrchestration(orchestrator, input, instanceId, startAt) {
        let name;
        if (typeof orchestrator === "string") {
            name = orchestrator;
        }
        else {
            name = (0, task_1.getName)(orchestrator);
        }
        const req = new pb.CreateInstanceRequest();
        req.setName(name);
        req.setInstanceid(instanceId ?? (0, crypto_1.randomUUID)());
        const i = new wrappers_pb_1.StringValue();
        i.setValue(JSON.stringify(input));
        const ts = new timestamp_pb_1.Timestamp();
        ts.fromDate(new Date(startAt?.getTime() ?? 0));
        req.setInput(i);
        req.setScheduledstarttimestamp(ts);
        console.log(`Starting new ${name} instance with ID = ${req.getInstanceid()}`);
        const prom = (0, util_1.promisify)(this._stub.startInstance.bind(this._stub));
        const res = (await prom(req));
        return res.getInstanceid();
    }
    /**
     * Fetches orchestrator instance metadata from the configured durable store.
     *
     * @param {string} instanceId - The unique identifier of the orchestrator instance to fetch.
     * @param {boolean} fetchPayloads - Indicates whether to fetch the orchestrator instance's
     *                                       inputs, outputs, and custom status (true) or omit them (false).
     * @returns {Promise<OrchestrationState | undefined>} A Promise that resolves to a metadata record describing
     *                                              the orchestrator instance and its execution status, or undefined
     *                                              if the instance is not found.
     */
    async getOrchestrationState(instanceId, fetchPayloads = true) {
        const req = new pb.GetInstanceRequest();
        req.setInstanceid(instanceId);
        req.setGetinputsandoutputs(fetchPayloads);
        const prom = (0, util_1.promisify)(this._stub.getInstance.bind(this._stub));
        const res = (await prom(req));
        return (0, orchestration_1.newOrchestrationState)(req.getInstanceid(), res);
    }
    /**
     * Waits for a orchestrator to start running and returns a {@link OrchestrationState} object
     * containing metadata about the started instance, and optionally, its input, output,
     * and custom status payloads.
     *
     * A "started" orchestrator instance refers to any instance not in the Pending state.
     *
     * If a orchestrator instance is already running when this method is called, it returns immediately.
     *
     * @param {string} instanceId - The unique identifier of the orchestrator instance to wait for.
     * @param {boolean} fetchPayloads - Indicates whether to fetch the orchestrator instance's
     *                                  inputs, outputs (true) or omit them (false).
     * @param {number} timeout - The amount of time, in seconds, to wait for the orchestrator instance to start.
     * @returns {Promise<OrchestrationState | undefined>} A Promise that resolves to the orchestrator instance metadata
     *                                               or undefined if no such instance is found.
     */
    async waitForOrchestrationStart(instanceId, fetchPayloads = false, timeout = 60) {
        const req = new pb.GetInstanceRequest();
        req.setInstanceid(instanceId);
        req.setGetinputsandoutputs(fetchPayloads);
        try {
            const prom = (0, util_1.promisify)(this._stub.waitForInstanceStart.bind(this._stub));
            // Execute the request and wait for the first response or timeout
            const res = (await Promise.race([
                prom(req),
                new Promise((_, reject) => setTimeout(() => reject(new timeout_error_1.TimeoutError()), timeout * 1000)),
            ]));
            return (0, orchestration_1.newOrchestrationState)(req.getInstanceid(), res);
        }
        catch (e) {
            console.log(e);
            throw e;
        }
    }
    /**
     * Waits for a orchestrator to complete running and returns a {@link OrchestrationState} object
     * containing metadata about the completed instance, and optionally, its input, output,
     * and custom status payloads.
     *
     * A "completed" orchestrator instance refers to any instance in one of the terminal states.
     * For example, the Completed, Failed, or Terminated states.
     *
     * If a orchestrator instance is already running when this method is called, it returns immediately.
     *
     * @param {string} instanceId - The unique identifier of the orchestrator instance to wait for.
     * @param {boolean} fetchPayloads - Indicates whether to fetch the orchestrator instance's
     *                                  inputs, outputs (true) or omit them (false).
     * @param {number} timeout - The amount of time, in seconds, to wait for the orchestrator instance to start.
     * @returns {Promise<OrchestrationState | undefined>} A Promise that resolves to the orchestrator instance metadata
     *                                               or undefined if no such instance is found.
     */
    async waitForOrchestrationCompletion(instanceId, fetchPayloads = true, timeout = 60) {
        const req = new pb.GetInstanceRequest();
        req.setInstanceid(instanceId);
        req.setGetinputsandoutputs(fetchPayloads);
        try {
            console.info(`Waiting ${timeout} seconds for instance ${instanceId} to complete...`);
            const prom = (0, util_1.promisify)(this._stub.waitForInstanceCompletion.bind(this._stub));
            // Execute the request and wait for the first response or timeout
            const res = (await Promise.race([
                prom(req),
                new Promise((_, reject) => setTimeout(() => reject(new timeout_error_1.TimeoutError()), timeout * 1000)),
            ]));
            const state = (0, orchestration_1.newOrchestrationState)(req.getInstanceid(), res);
            if (!state) {
                return undefined;
            }
            let details;
            if (state.runtimeStatus === orchestration_status_enum_1.OrchestrationStatus.FAILED && state.failureDetails) {
                details = state.failureDetails;
                console.info(`Instance ${instanceId} failed: [${details.errorType}] ${details.message}`);
            }
            else if (state.runtimeStatus === orchestration_status_enum_1.OrchestrationStatus.TERMINATED) {
                console.info(`Instance ${instanceId} was terminated`);
            }
            else if (state.runtimeStatus === orchestration_status_enum_1.OrchestrationStatus.COMPLETED) {
                console.info(`Instance ${instanceId} completed`);
            }
            return state;
        }
        catch (e) {
            console.log(e);
            throw e;
        }
    }
    /**
     * Sends an event notification message to an awaiting orchestrator instance.
     *
     * This method triggers the specified event in a running orchestrator instance,
     * allowing the orchestrator to respond to the event if it has defined event handlers.
     *
     * @param {string} instanceId - The unique identifier of the orchestrator instance that will handle the event.
     * @param {string} eventName - The name of the event. Event names are case-insensitive.
     * @param {any} [data] - An optional serializable data payload to include with the event.
     */
    async raiseOrchestrationEvent(instanceId, eventName, data = null) {
        const req = new pb.RaiseEventRequest();
        req.setInstanceid(instanceId);
        req.setName(eventName);
        const i = new wrappers_pb_1.StringValue();
        i.setValue(JSON.stringify(data));
        req.setInput(i);
        console.log(`Raising event '${eventName}' for instance '${instanceId}'`);
        const prom = (0, util_1.promisify)(this._stub.raiseEvent.bind(this._stub));
        await prom(req);
    }
    /**
     * Terminates the orchestrator associated with the provided instance id.
     *
     * @param {string} instanceId - orchestrator instance id to terminate.
     * @param {any} output - The optional output to set for the terminated orchestrator instance.
     */
    async terminateOrchestration(instanceId, output = null) {
        const req = new pb.TerminateRequest();
        req.setInstanceid(instanceId);
        const i = new wrappers_pb_1.StringValue();
        i.setValue(JSON.stringify(output));
        req.setOutput(i);
        console.log(`Terminating '${instanceId}'`);
        const prom = (0, util_1.promisify)(this._stub.terminateInstance.bind(this._stub));
        await prom(req);
    }
    async suspendOrchestration(instanceId) {
        const req = new pb.SuspendRequest();
        req.setInstanceid(instanceId);
        console.log(`Suspending '${instanceId}'`);
        const prom = (0, util_1.promisify)(this._stub.suspendInstance.bind(this._stub));
        await prom(req);
    }
    async resumeOrchestration(instanceId) {
        const req = new pb.ResumeRequest();
        req.setInstanceid(instanceId);
        console.log(`Resuming '${instanceId}'`);
        const prom = (0, util_1.promisify)(this._stub.resumeInstance.bind(this._stub));
        await prom(req);
    }
    /**
     * Purges orchestration instance metadata from the durable store.
     *
     * This method can be used to permanently delete orchestration metadata from the underlying storage provider,
     * including any stored inputs, outputs, and orchestration history records. This is often useful for implementing
     * data retention policies and for keeping storage costs minimal. Only orchestration instances in the
     * `Completed`, `Failed`, or `Terminated` state can be purged.
     *
     * If the target orchestration instance is not found in the data store, or if the instance is found but not in a
     * terminal state, then the returned {@link PurgeResult} will report that zero instances were purged.
     * Otherwise, the existing data will be purged, and the returned {@link PurgeResult} will report that one instance
     * was purged.
     *
     * @param value - The unique ID of the orchestration instance to purge or orchestration instance filter criteria used
     * to determine which instances to purge.
     * @returns A Promise that resolves to a {@link PurgeResult} or `undefined` if the purge operation was not successful.
     */
    async purgeOrchestration(value) {
        let res;
        if (typeof value === `string`) {
            const instanceId = value;
            const req = new pb.PurgeInstancesRequest();
            req.setInstanceid(instanceId);
            console.log(`Purging Instance '${instanceId}'`);
            const prom = (0, util_1.promisify)(this._stub.purgeInstances.bind(this._stub));
            res = (await prom(req));
        }
        else {
            const purgeInstanceCriteria = value;
            const req = new pb.PurgeInstancesRequest();
            const filter = new pb.PurgeInstanceFilter();
            const createdTimeFrom = purgeInstanceCriteria.getCreatedTimeFrom();
            if (createdTimeFrom != undefined) {
                const timestamp = new timestamp_pb_1.Timestamp();
                timestamp.fromDate(createdTimeFrom);
                filter.setCreatedtimefrom(timestamp);
            }
            const createdTimeTo = purgeInstanceCriteria.getCreatedTimeTo();
            if (createdTimeTo != undefined) {
                const timestamp = new timestamp_pb_1.Timestamp();
                timestamp.fromDate(createdTimeTo);
                filter.setCreatedtimeto(timestamp);
            }
            const runtimeStatusList = purgeInstanceCriteria.getRuntimeStatusList();
            for (const status of runtimeStatusList) {
                filter.addRuntimestatus((0, orchestration_status_enum_1.toProtobuf)(status));
            }
            req.setPurgeinstancefilter(filter);
            const timeout = purgeInstanceCriteria.getTimeout();
            console.log("Purging Instance using purging criteria");
            const prom = (0, util_1.promisify)(this._stub.purgeInstances.bind(this._stub));
            // Execute the request and wait for the first response or timeout
            res = (await Promise.race([
                prom(req),
                new Promise((_, reject) => setTimeout(() => reject(new timeout_error_1.TimeoutError()), timeout)),
            ]));
        }
        if (!res) {
            return;
        }
        return new orchestration_purge_result_1.PurgeResult(res.getDeletedinstancecount());
    }
}
exports.TaskHubGrpcClient = TaskHubGrpcClient;

// SIG // Begin signature block
// SIG // MIInvQYJKoZIhvcNAQcCoIInrjCCJ6oCAQExDzANBglg
// SIG // hkgBZQMEAgEFADB3BgorBgEEAYI3AgEEoGkwZzAyBgor
// SIG // BgEEAYI3AgEeMCQCAQEEEBDgyQbOONQRoqMAEEvTUJAC
// SIG // AQACAQACAQACAQACAQAwMTANBglghkgBZQMEAgEFAAQg
// SIG // iQHGz2D+JRQTBQ0a6hzhS3huLz1iDW1Qcb4PdfRHJqWg
// SIG // gg12MIIF9DCCA9ygAwIBAgITMwAAA68wQA5Mo00FQQAA
// SIG // AAADrzANBgkqhkiG9w0BAQsFADB+MQswCQYDVQQGEwJV
// SIG // UzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMH
// SIG // UmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBv
// SIG // cmF0aW9uMSgwJgYDVQQDEx9NaWNyb3NvZnQgQ29kZSBT
// SIG // aWduaW5nIFBDQSAyMDExMB4XDTIzMTExNjE5MDkwMFoX
// SIG // DTI0MTExNDE5MDkwMFowdDELMAkGA1UEBhMCVVMxEzAR
// SIG // BgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1v
// SIG // bmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlv
// SIG // bjEeMBwGA1UEAxMVTWljcm9zb2Z0IENvcnBvcmF0aW9u
// SIG // MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA
// SIG // zkvLNa2un9GBrYNDoRGkGv7d0PqtTBB4ViYakFbjuWpm
// SIG // F0KcvDAzzaCWJPhVgIXjz+S8cHEoHuWnp/n+UOljT3eh
// SIG // A8Rs6Lb1aTYub3tB/e0txewv2sQ3yscjYdtTBtFvEm9L
// SIG // 8Yv76K3Cxzi/Yvrdg+sr7w8y5RHn1Am0Ff8xggY1xpWC
// SIG // XFI+kQM18njQDcUqSlwBnexYfqHBhzz6YXA/S0EziYBu
// SIG // 2O2mM7R6gSyYkEOHgIGTVOGnOvvC5xBgC4KNcnQuQSRL
// SIG // iUI2CmzU8vefR6ykruyzt1rNMPI8OqWHQtSDKXU5JNqb
// SIG // k4GNjwzcwbSzOHrxuxWHq91l/vLdVDGDUwIDAQABo4IB
// SIG // czCCAW8wHwYDVR0lBBgwFgYKKwYBBAGCN0wIAQYIKwYB
// SIG // BQUHAwMwHQYDVR0OBBYEFEcccTTyBDxkjvJKs/m4AgEF
// SIG // hl7BMEUGA1UdEQQ+MDykOjA4MR4wHAYDVQQLExVNaWNy
// SIG // b3NvZnQgQ29ycG9yYXRpb24xFjAUBgNVBAUTDTIzMDAx
// SIG // Mis1MDE4MjYwHwYDVR0jBBgwFoAUSG5k5VAF04KqFzc3
// SIG // IrVtqMp1ApUwVAYDVR0fBE0wSzBJoEegRYZDaHR0cDov
// SIG // L3d3dy5taWNyb3NvZnQuY29tL3BraW9wcy9jcmwvTWlj
// SIG // Q29kU2lnUENBMjAxMV8yMDExLTA3LTA4LmNybDBhBggr
// SIG // BgEFBQcBAQRVMFMwUQYIKwYBBQUHMAKGRWh0dHA6Ly93
// SIG // d3cubWljcm9zb2Z0LmNvbS9wa2lvcHMvY2VydHMvTWlj
// SIG // Q29kU2lnUENBMjAxMV8yMDExLTA3LTA4LmNydDAMBgNV
// SIG // HRMBAf8EAjAAMA0GCSqGSIb3DQEBCwUAA4ICAQCEsRbf
// SIG // 80dn60xTweOWHZoWaQdpzSaDqIvqpYHE5ZzuEMJWDdcP
// SIG // 72MGw8v6BSaJQ+a+hTCXdERnIBDPKvU4ENjgu4EBJocH
// SIG // lSe8riiZUAR+z+z4OUYqoFd3EqJyfjjOJBR2z94Dy4ss
// SIG // 7LEkHUbj2NZiFqBoPYu2OGQvEk+1oaUsnNKZ7Nl7FHtV
// SIG // 7CI2lHBru83e4IPe3glIi0XVZJT5qV6Gx/QhAFmpEVBj
// SIG // SAmDdgII4UUwuI9yiX6jJFNOEek6MoeP06LMJtbqA3Bq
// SIG // +ZWmJ033F97uVpyaiS4bj3vFI/ZBgDnMqNDtZjcA2vi4
// SIG // RRMweggd9vsHyTLpn6+nXoLy03vMeebq0C3k44pgUIEu
// SIG // PQUlJIRTe6IrN3GcjaZ6zHGuQGWgu6SyO9r7qkrEpS2p
// SIG // RjnGZjx2RmCamdAWnDdu+DmfNEPAddYjaJJ7PTnd+PGz
// SIG // G+WeH4ocWgVnm5fJFhItjj70CJjgHqt57e1FiQcyWCwB
// SIG // hKX2rGgN2UICHBF3Q/rsKOspjMw2OlGphTn2KmFl5J7c
// SIG // Qxru54A9roClLnHGCiSUYos/iwFHI/dAVXEh0S0KKfTf
// SIG // M6AC6/9bCbsD61QLcRzRIElvgCgaiMWFjOBL99pemoEl
// SIG // AHsyzG6uX93fMfas09N9YzA0/rFAKAsNDOcFbQlEHKiD
// SIG // T7mI20tVoCcmSIhJATCCB3owggVioAMCAQICCmEOkNIA
// SIG // AAAAAAMwDQYJKoZIhvcNAQELBQAwgYgxCzAJBgNVBAYT
// SIG // AlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQH
// SIG // EwdSZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29y
// SIG // cG9yYXRpb24xMjAwBgNVBAMTKU1pY3Jvc29mdCBSb290
// SIG // IENlcnRpZmljYXRlIEF1dGhvcml0eSAyMDExMB4XDTEx
// SIG // MDcwODIwNTkwOVoXDTI2MDcwODIxMDkwOVowfjELMAkG
// SIG // A1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAO
// SIG // BgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29m
// SIG // dCBDb3Jwb3JhdGlvbjEoMCYGA1UEAxMfTWljcm9zb2Z0
// SIG // IENvZGUgU2lnbmluZyBQQ0EgMjAxMTCCAiIwDQYJKoZI
// SIG // hvcNAQEBBQADggIPADCCAgoCggIBAKvw+nIQHC6t2G6q
// SIG // ghBNNLrytlghn0IbKmvpWlCquAY4GgRJun/DDB7dN2vG
// SIG // EtgL8DjCmQawyDnVARQxQtOJDXlkh36UYCRsr55JnOlo
// SIG // XtLfm1OyCizDr9mpK656Ca/XllnKYBoF6WZ26DJSJhIv
// SIG // 56sIUM+zRLdd2MQuA3WraPPLbfM6XKEW9Ea64DhkrG5k
// SIG // NXimoGMPLdNAk/jj3gcN1Vx5pUkp5w2+oBN3vpQ97/vj
// SIG // K1oQH01WKKJ6cuASOrdJXtjt7UORg9l7snuGG9k+sYxd
// SIG // 6IlPhBryoS9Z5JA7La4zWMW3Pv4y07MDPbGyr5I4ftKd
// SIG // gCz1TlaRITUlwzluZH9TupwPrRkjhMv0ugOGjfdf8NBS
// SIG // v4yUh7zAIXQlXxgotswnKDglmDlKNs98sZKuHCOnqWbs
// SIG // YR9q4ShJnV+I4iVd0yFLPlLEtVc/JAPw0XpbL9Uj43Bd
// SIG // D1FGd7P4AOG8rAKCX9vAFbO9G9RVS+c5oQ/pI0m8GLhE
// SIG // fEXkwcNyeuBy5yTfv0aZxe/CHFfbg43sTUkwp6uO3+xb
// SIG // n6/83bBm4sGXgXvt1u1L50kppxMopqd9Z4DmimJ4X7Iv
// SIG // hNdXnFy/dygo8e1twyiPLI9AN0/B4YVEicQJTMXUpUMv
// SIG // dJX3bvh4IFgsE11glZo+TzOE2rCIF96eTvSWsLxGoGyY
// SIG // 0uDWiIwLAgMBAAGjggHtMIIB6TAQBgkrBgEEAYI3FQEE
// SIG // AwIBADAdBgNVHQ4EFgQUSG5k5VAF04KqFzc3IrVtqMp1
// SIG // ApUwGQYJKwYBBAGCNxQCBAweCgBTAHUAYgBDAEEwCwYD
// SIG // VR0PBAQDAgGGMA8GA1UdEwEB/wQFMAMBAf8wHwYDVR0j
// SIG // BBgwFoAUci06AjGQQ7kUBU7h6qfHMdEjiTQwWgYDVR0f
// SIG // BFMwUTBPoE2gS4ZJaHR0cDovL2NybC5taWNyb3NvZnQu
// SIG // Y29tL3BraS9jcmwvcHJvZHVjdHMvTWljUm9vQ2VyQXV0
// SIG // MjAxMV8yMDExXzAzXzIyLmNybDBeBggrBgEFBQcBAQRS
// SIG // MFAwTgYIKwYBBQUHMAKGQmh0dHA6Ly93d3cubWljcm9z
// SIG // b2Z0LmNvbS9wa2kvY2VydHMvTWljUm9vQ2VyQXV0MjAx
// SIG // MV8yMDExXzAzXzIyLmNydDCBnwYDVR0gBIGXMIGUMIGR
// SIG // BgkrBgEEAYI3LgMwgYMwPwYIKwYBBQUHAgEWM2h0dHA6
// SIG // Ly93d3cubWljcm9zb2Z0LmNvbS9wa2lvcHMvZG9jcy9w
// SIG // cmltYXJ5Y3BzLmh0bTBABggrBgEFBQcCAjA0HjIgHQBM
// SIG // AGUAZwBhAGwAXwBwAG8AbABpAGMAeQBfAHMAdABhAHQA
// SIG // ZQBtAGUAbgB0AC4gHTANBgkqhkiG9w0BAQsFAAOCAgEA
// SIG // Z/KGpZjgVHkaLtPYdGcimwuWEeFjkplCln3SeQyQwWVf
// SIG // Liw++MNy0W2D/r4/6ArKO79HqaPzadtjvyI1pZddZYSQ
// SIG // fYtGUFXYDJJ80hpLHPM8QotS0LD9a+M+By4pm+Y9G6XU
// SIG // tR13lDni6WTJRD14eiPzE32mkHSDjfTLJgJGKsKKELuk
// SIG // qQUMm+1o+mgulaAqPyprWEljHwlpblqYluSD9MCP80Yr
// SIG // 3vw70L01724lruWvJ+3Q3fMOr5kol5hNDj0L8giJ1h/D
// SIG // Mhji8MUtzluetEk5CsYKwsatruWy2dsViFFFWDgycSca
// SIG // f7H0J/jeLDogaZiyWYlobm+nt3TDQAUGpgEqKD6CPxNN
// SIG // ZgvAs0314Y9/HG8VfUWnduVAKmWjw11SYobDHWM2l4bf
// SIG // 2vP48hahmifhzaWX0O5dY0HjWwechz4GdwbRBrF1HxS+
// SIG // YWG18NzGGwS+30HHDiju3mUv7Jf2oVyW2ADWoUa9WfOX
// SIG // pQlLSBCZgB/QACnFsZulP0V3HjXG0qKin3p6IvpIlR+r
// SIG // +0cjgPWe+L9rt0uX4ut1eBrs6jeZeRhL/9azI2h15q/6
// SIG // /IvrC4DqaTuv/DDtBEyO3991bWORPdGdVk5Pv4BXIqF4
// SIG // ETIheu9BCrE/+6jMpF3BoYibV3FWTkhFwELJm3ZbCoBI
// SIG // a/15n8G9bW1qyVJzEw16UM0xghmfMIIZmwIBATCBlTB+
// SIG // MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3Rv
// SIG // bjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWlj
// SIG // cm9zb2Z0IENvcnBvcmF0aW9uMSgwJgYDVQQDEx9NaWNy
// SIG // b3NvZnQgQ29kZSBTaWduaW5nIFBDQSAyMDExAhMzAAAD
// SIG // rzBADkyjTQVBAAAAAAOvMA0GCWCGSAFlAwQCAQUAoIGu
// SIG // MBkGCSqGSIb3DQEJAzEMBgorBgEEAYI3AgEEMBwGCisG
// SIG // AQQBgjcCAQsxDjAMBgorBgEEAYI3AgEVMC8GCSqGSIb3
// SIG // DQEJBDEiBCDOL/INeajZGvyBgmQQCwVa1bLy/z0X9y2L
// SIG // 59ynO7oWdDBCBgorBgEEAYI3AgEMMTQwMqAUgBIATQBp
// SIG // AGMAcgBvAHMAbwBmAHShGoAYaHR0cDovL3d3dy5taWNy
// SIG // b3NvZnQuY29tMA0GCSqGSIb3DQEBAQUABIIBAAQr1Ntg
// SIG // x8CUQVlY1sQ4BHbGGX2El7ks3Ay11kjLY81AVIbL9QId
// SIG // vzsZsJjIP00UIsRmc1+ktKIwilbnq5SefGSe55PjHijh
// SIG // hHYIEJL3QGLOD9HsyGg2ura0jxVenj+oI8PSxeYsb3w7
// SIG // v8s0+EBkqGyPIG8kWSf9XCtuW38SrxHxKEP8eZTSiBVc
// SIG // SdS9mb+WxdlTpiawhxvCcpVMC7zvv9tdcigMyNPn13cJ
// SIG // ljbR/zWnUi5nJvZXLLUBMn/Jq1hH4TieQsq1OuqlN30/
// SIG // MAiDleHVpbRBA63G5pwXE5pvvsy8jkc6cW5cJNP6e+5+
// SIG // C1XbTitoZALjCbISpF7E/04Y0k2hghcpMIIXJQYKKwYB
// SIG // BAGCNwMDATGCFxUwghcRBgkqhkiG9w0BBwKgghcCMIIW
// SIG // /gIBAzEPMA0GCWCGSAFlAwQCAQUAMIIBWQYLKoZIhvcN
// SIG // AQkQAQSgggFIBIIBRDCCAUACAQEGCisGAQQBhFkKAwEw
// SIG // MTANBglghkgBZQMEAgEFAAQgg7XGCo7IlpZRb/I28R+7
// SIG // ME/B3+yZ4qe25bLVa7C/WL0CBmWDFgt6DRgTMjAyNDAx
// SIG // MDgxODE1NDQuOTI0WjAEgAIB9KCB2KSB1TCB0jELMAkG
// SIG // A1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAO
// SIG // BgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29m
// SIG // dCBDb3Jwb3JhdGlvbjEtMCsGA1UECxMkTWljcm9zb2Z0
// SIG // IElyZWxhbmQgT3BlcmF0aW9ucyBMaW1pdGVkMSYwJAYD
// SIG // VQQLEx1UaGFsZXMgVFNTIEVTTjo4NkRGLTRCQkMtOTMz
// SIG // NTElMCMGA1UEAxMcTWljcm9zb2Z0IFRpbWUtU3RhbXAg
// SIG // U2VydmljZaCCEXgwggcnMIIFD6ADAgECAhMzAAAB3V1X
// SIG // HZXUraobAAEAAAHdMA0GCSqGSIb3DQEBCwUAMHwxCzAJ
// SIG // BgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAw
// SIG // DgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNyb3Nv
// SIG // ZnQgQ29ycG9yYXRpb24xJjAkBgNVBAMTHU1pY3Jvc29m
// SIG // dCBUaW1lLVN0YW1wIFBDQSAyMDEwMB4XDTIzMTAxMjE5
// SIG // MDcwOVoXDTI1MDExMDE5MDcwOVowgdIxCzAJBgNVBAYT
// SIG // AlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQH
// SIG // EwdSZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29y
// SIG // cG9yYXRpb24xLTArBgNVBAsTJE1pY3Jvc29mdCBJcmVs
// SIG // YW5kIE9wZXJhdGlvbnMgTGltaXRlZDEmMCQGA1UECxMd
// SIG // VGhhbGVzIFRTUyBFU046ODZERi00QkJDLTkzMzUxJTAj
// SIG // BgNVBAMTHE1pY3Jvc29mdCBUaW1lLVN0YW1wIFNlcnZp
// SIG // Y2UwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoIC
// SIG // AQCoTgOUROoud5x1ER+JZ3yi6fvSb4qbk7XLWoqwsTFE
// SIG // qz0suQlitg7a4kD/k+dh12zdoOwJLUNaUGW0wxhcyund
// SIG // N72GDawj7iSvj0bD9hT1Q4wV8uZqy0RcyBxy2ogGqGxO
// SIG // bxSbqMWdGVnSjArPGnI4R1Jn2mPu/fwke7jfgePsYyas
// SIG // L3aVP5qdJgKt3mq8h/gCpr+pZK0DfM4K3GwoB8LKr76k
// SIG // +pRBamKYu7ip+zAGG0ni3tKTHWrVeRFujVZ1zGDk0Srh
// SIG // j38nwSnUobmpS6PPJBu6mtpmwOZe+/l9OiQHrDJKMmK+
// SIG // P/QoAxYx1KXB0jg7o5RQSjItevM0XS3q3aVtGwV/RA7s
// SIG // dswTDGhCvDcsWsAhLgKu/vu5LRQG5d4VCrbs2AtRVGbl
// SIG // JdgaulNe0uAirKkd4rS0/ajXG9qQCeI6yA3ZZeU4KKnn
// SIG // +YKb/mHLwTPN+G1xTcMrXd7oww9uD/Q3fMX1Sb7po7AU
// SIG // EJCuU/6stx60CfLndZx0r7RVYuUmv7mxrmBKUvIBehg1
// SIG // jefym73hZHbKE1SD6PKZFoYz7NEO5wOfrgcUAeM5YxIy
// SIG // s+VluwQOMKZhZtuH4QZkY1eDW6fp+/HIAI7w0n05QOg2
// SIG // AXL9pMdSR9nSIWkZ0njl3j0+oTBdCJeffCzLtK8N+VYl
// SIG // FnAEJFDVE8UZ6hhcc+cPmbrDAwIDAQABo4IBSTCCAUUw
// SIG // HQYDVR0OBBYEFG6i9baMj1HaRcsh0gylo9COJcPxMB8G
// SIG // A1UdIwQYMBaAFJ+nFV0AXmJdg/Tl0mWnG1M1GelyMF8G
// SIG // A1UdHwRYMFYwVKBSoFCGTmh0dHA6Ly93d3cubWljcm9z
// SIG // b2Z0LmNvbS9wa2lvcHMvY3JsL01pY3Jvc29mdCUyMFRp
// SIG // bWUtU3RhbXAlMjBQQ0ElMjAyMDEwKDEpLmNybDBsBggr
// SIG // BgEFBQcBAQRgMF4wXAYIKwYBBQUHMAKGUGh0dHA6Ly93
// SIG // d3cubWljcm9zb2Z0LmNvbS9wa2lvcHMvY2VydHMvTWlj
// SIG // cm9zb2Z0JTIwVGltZS1TdGFtcCUyMFBDQSUyMDIwMTAo
// SIG // MSkuY3J0MAwGA1UdEwEB/wQCMAAwFgYDVR0lAQH/BAww
// SIG // CgYIKwYBBQUHAwgwDgYDVR0PAQH/BAQDAgeAMA0GCSqG
// SIG // SIb3DQEBCwUAA4ICAQAuVNmyDS4FyB1mzHKlbn/Y5FE/
// SIG // yvM8iwb7uYfCa6mEds/3mjtsqNTqHPUocr8W3vRmQ7u5
// SIG // JFM8UsidSGZLGWcOhQ6usmTU9zxIwBJ0RKUQS/Evpm14
// SIG // PjuFS0tC0pm/FyGYi7GqmdHwxHL9x3gPv8v6ipwkFpF4
// SIG // IaWhDMBjEM0ZIRsHBnV69cxqUOx08b37ue8RcWV9TJCp
// SIG // 1hRDSerq3fuLXlIF49J4CDsf/5d1zCtx7fE9vs7xiTQB
// SIG // fuf+agZO569O/cyAmxV78bYnTTeXqF3VvvawCJEvlBg9
// SIG // fQGXQa7benWfjnQKrgYg5GEOZFX1DCkt9ch0DhoJhcbg
// SIG // js06Vh2pa6qXSJZbMvCjbI+VPbDjYlgHfTzZchBx20GQ
// SIG // 5ovfwTZTmMk7dGHoS2w6L5mVDWs5O/TnfwPde5qgnU6q
// SIG // xMcARlD2zD/v73WFKmibKbqQZ1LYzn/++gwIVcvHv3us
// SIG // 0ffD5KZZpYjtm6y90N6w+vmQlXaxjPUZuoVAwQZL2Ifm
// SIG // I5hnXEORwelk/UXnPPqgx5m4S4V+GXWmq3efzl3i24Md
// SIG // n+y+EEEI9yoKo6gzliJ1YTRNYGLU1ix3uPPNnf5Oy7ot
// SIG // CtYPBGayg+5mjq7CSyjypXoHHifRQqmNbA1ClIUWtBB1
// SIG // FvmZCi5aISq0uxcI3ayDVpDwYG0M5wo3RNpuO0I02zCC
// SIG // B3EwggVZoAMCAQICEzMAAAAVxedrngKbSZkAAAAAABUw
// SIG // DQYJKoZIhvcNAQELBQAwgYgxCzAJBgNVBAYTAlVTMRMw
// SIG // EQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRt
// SIG // b25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRp
// SIG // b24xMjAwBgNVBAMTKU1pY3Jvc29mdCBSb290IENlcnRp
// SIG // ZmljYXRlIEF1dGhvcml0eSAyMDEwMB4XDTIxMDkzMDE4
// SIG // MjIyNVoXDTMwMDkzMDE4MzIyNVowfDELMAkGA1UEBhMC
// SIG // VVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcT
// SIG // B1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jw
// SIG // b3JhdGlvbjEmMCQGA1UEAxMdTWljcm9zb2Z0IFRpbWUt
// SIG // U3RhbXAgUENBIDIwMTAwggIiMA0GCSqGSIb3DQEBAQUA
// SIG // A4ICDwAwggIKAoICAQDk4aZM57RyIQt5osvXJHm9DtWC
// SIG // 0/3unAcH0qlsTnXIyjVX9gF/bErg4r25PhdgM/9cT8dm
// SIG // 95VTcVrifkpa/rg2Z4VGIwy1jRPPdzLAEBjoYH1qUoNE
// SIG // t6aORmsHFPPFdvWGUNzBRMhxXFExN6AKOG6N7dcP2CZT
// SIG // fDlhAnrEqv1yaa8dq6z2Nr41JmTamDu6GnszrYBbfowQ
// SIG // HJ1S/rboYiXcag/PXfT+jlPP1uyFVk3v3byNpOORj7I5
// SIG // LFGc6XBpDco2LXCOMcg1KL3jtIckw+DJj361VI/c+gVV
// SIG // mG1oO5pGve2krnopN6zL64NF50ZuyjLVwIYwXE8s4mKy
// SIG // zbnijYjklqwBSru+cakXW2dg3viSkR4dPf0gz3N9QZpG
// SIG // dc3EXzTdEonW/aUgfX782Z5F37ZyL9t9X4C626p+Nuw2
// SIG // TPYrbqgSUei/BQOj0XOmTTd0lBw0gg/wEPK3Rxjtp+iZ
// SIG // fD9M269ewvPV2HM9Q07BMzlMjgK8QmguEOqEUUbi0b1q
// SIG // GFphAXPKZ6Je1yh2AuIzGHLXpyDwwvoSCtdjbwzJNmSL
// SIG // W6CmgyFdXzB0kZSU2LlQ+QuJYfM2BjUYhEfb3BvR/bLU
// SIG // HMVr9lxSUV0S2yW6r1AFemzFER1y7435UsSFF5PAPBXb
// SIG // GjfHCBUYP3irRbb1Hode2o+eFnJpxq57t7c+auIurQID
// SIG // AQABo4IB3TCCAdkwEgYJKwYBBAGCNxUBBAUCAwEAATAj
// SIG // BgkrBgEEAYI3FQIEFgQUKqdS/mTEmr6CkTxGNSnPEP8v
// SIG // BO4wHQYDVR0OBBYEFJ+nFV0AXmJdg/Tl0mWnG1M1Gely
// SIG // MFwGA1UdIARVMFMwUQYMKwYBBAGCN0yDfQEBMEEwPwYI
// SIG // KwYBBQUHAgEWM2h0dHA6Ly93d3cubWljcm9zb2Z0LmNv
// SIG // bS9wa2lvcHMvRG9jcy9SZXBvc2l0b3J5Lmh0bTATBgNV
// SIG // HSUEDDAKBggrBgEFBQcDCDAZBgkrBgEEAYI3FAIEDB4K
// SIG // AFMAdQBiAEMAQTALBgNVHQ8EBAMCAYYwDwYDVR0TAQH/
// SIG // BAUwAwEB/zAfBgNVHSMEGDAWgBTV9lbLj+iiXGJo0T2U
// SIG // kFvXzpoYxDBWBgNVHR8ETzBNMEugSaBHhkVodHRwOi8v
// SIG // Y3JsLm1pY3Jvc29mdC5jb20vcGtpL2NybC9wcm9kdWN0
// SIG // cy9NaWNSb29DZXJBdXRfMjAxMC0wNi0yMy5jcmwwWgYI
// SIG // KwYBBQUHAQEETjBMMEoGCCsGAQUFBzAChj5odHRwOi8v
// SIG // d3d3Lm1pY3Jvc29mdC5jb20vcGtpL2NlcnRzL01pY1Jv
// SIG // b0NlckF1dF8yMDEwLTA2LTIzLmNydDANBgkqhkiG9w0B
// SIG // AQsFAAOCAgEAnVV9/Cqt4SwfZwExJFvhnnJL/Klv6lwU
// SIG // tj5OR2R4sQaTlz0xM7U518JxNj/aZGx80HU5bbsPMeTC
// SIG // j/ts0aGUGCLu6WZnOlNN3Zi6th542DYunKmCVgADsAW+
// SIG // iehp4LoJ7nvfam++Kctu2D9IdQHZGN5tggz1bSNU5HhT
// SIG // dSRXud2f8449xvNo32X2pFaq95W2KFUn0CS9QKC/GbYS
// SIG // EhFdPSfgQJY4rPf5KYnDvBewVIVCs/wMnosZiefwC2qB
// SIG // woEZQhlSdYo2wh3DYXMuLGt7bj8sCXgU6ZGyqVvfSaN0
// SIG // DLzskYDSPeZKPmY7T7uG+jIa2Zb0j/aRAfbOxnT99kxy
// SIG // bxCrdTDFNLB62FD+CljdQDzHVG2dY3RILLFORy3BFARx
// SIG // v2T5JL5zbcqOCb2zAVdJVGTZc9d/HltEAY5aGZFrDZ+k
// SIG // KNxnGSgkujhLmm77IVRrakURR6nxt67I6IleT53S0Ex2
// SIG // tVdUCbFpAUR+fKFhbHP+CrvsQWY9af3LwUFJfn6Tvsv4
// SIG // O+S3Fb+0zj6lMVGEvL8CwYKiexcdFYmNcP7ntdAoGokL
// SIG // jzbaukz5m/8K6TT4JDVnK+ANuOaMmdbhIurwJ0I9JZTm
// SIG // dHRbatGePu1+oDEzfbzL6Xu/OHBE0ZDxyKs6ijoIYn/Z
// SIG // cGNTTY3ugm2lBRDBcQZqELQdVTNYs6FwZvKhggLUMIIC
// SIG // PQIBATCCAQChgdikgdUwgdIxCzAJBgNVBAYTAlVTMRMw
// SIG // EQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRt
// SIG // b25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRp
// SIG // b24xLTArBgNVBAsTJE1pY3Jvc29mdCBJcmVsYW5kIE9w
// SIG // ZXJhdGlvbnMgTGltaXRlZDEmMCQGA1UECxMdVGhhbGVz
// SIG // IFRTUyBFU046ODZERi00QkJDLTkzMzUxJTAjBgNVBAMT
// SIG // HE1pY3Jvc29mdCBUaW1lLVN0YW1wIFNlcnZpY2WiIwoB
// SIG // ATAHBgUrDgMCGgMVADYjRxll2zWgz8Z8og2xDnIkoxYQ
// SIG // oIGDMIGApH4wfDELMAkGA1UEBhMCVVMxEzARBgNVBAgT
// SIG // Cldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAc
// SIG // BgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEmMCQG
// SIG // A1UEAxMdTWljcm9zb2Z0IFRpbWUtU3RhbXAgUENBIDIw
// SIG // MTAwDQYJKoZIhvcNAQEFBQACBQDpRqAYMCIYDzIwMjQw
// SIG // MTA5MDAyMzUyWhgPMjAyNDAxMTAwMDIzNTJaMHQwOgYK
// SIG // KwYBBAGEWQoEATEsMCowCgIFAOlGoBgCAQAwBwIBAAIC
// SIG // FfEwBwIBAAICEVowCgIFAOlH8ZgCAQAwNgYKKwYBBAGE
// SIG // WQoEAjEoMCYwDAYKKwYBBAGEWQoDAqAKMAgCAQACAweh
// SIG // IKEKMAgCAQACAwGGoDANBgkqhkiG9w0BAQUFAAOBgQAj
// SIG // 0/j/MCiLKNbfar3lyQA7vkmF8qbXbGjprYGuLzaVoTFg
// SIG // A8GZ3KBJEqRq406+w+l+GqHbpbnMl4hf8A6zCKWXMExs
// SIG // i+ODSs5JhsUELyreWuu4cQO6urzPsYR+siAmcCo9xWWU
// SIG // Qn97fmVPExI4dA54MjE1XAt0fa/rM42c5acz5TGCBA0w
// SIG // ggQJAgEBMIGTMHwxCzAJBgNVBAYTAlVTMRMwEQYDVQQI
// SIG // EwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4w
// SIG // HAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xJjAk
// SIG // BgNVBAMTHU1pY3Jvc29mdCBUaW1lLVN0YW1wIFBDQSAy
// SIG // MDEwAhMzAAAB3V1XHZXUraobAAEAAAHdMA0GCWCGSAFl
// SIG // AwQCAQUAoIIBSjAaBgkqhkiG9w0BCQMxDQYLKoZIhvcN
// SIG // AQkQAQQwLwYJKoZIhvcNAQkEMSIEIAvvgOcvdDkvIIu7
// SIG // duf85gR5yqpYlhrlDrJu9S5woNXKMIH6BgsqhkiG9w0B
// SIG // CRACLzGB6jCB5zCB5DCBvQQgYf8OLZplrE94mZx7R9FZ
// SIG // N+1AjdNpUcWPkYjjesAxY2YwgZgwgYCkfjB8MQswCQYD
// SIG // VQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4G
// SIG // A1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0
// SIG // IENvcnBvcmF0aW9uMSYwJAYDVQQDEx1NaWNyb3NvZnQg
// SIG // VGltZS1TdGFtcCBQQ0EgMjAxMAITMwAAAd1dVx2V1K2q
// SIG // GwABAAAB3TAiBCBZGPkMOeMhu0LHuQR6Cpx5raNSeHZV
// SIG // 2j21YoaunFIRvDANBgkqhkiG9w0BAQsFAASCAgBH5hPl
// SIG // kLOuZSCg6GR0jH85ePcpR7ozFzWB7LVBGhWZtN/W85YE
// SIG // CZYTeniZJwhb/wykSAVawPXOyYA1UIpZHyGF4VeRS5d9
// SIG // zE34OXQwh23dtIra0Pzq9oDKhJE0pV01QkZEfkSb006G
// SIG // FRGij+ApYrl7lz4mR3S5ZcBsMvJ3XwiUtaZDCZtYq342
// SIG // NVYS7BFU9uYF9U0+1M7eTMhBtR4lbtcUwZQZbXTaAuaE
// SIG // U1E3umpRZhdC4hP/v7hsyGDmldwnenlqk0yLoznEiMfG
// SIG // aCws/IyFmWq+Zm0VRXZ3yQC4xWvc8HxHxruxmb8qr0uC
// SIG // KWIUG4mUw2J2q3b21h+NabNyUjXQ3XneDO/CZ0obbYl1
// SIG // g3ZgyxF0R9Ap+Puy9MkSJMnd9XDzCk0qbhnwriPFC1P/
// SIG // 8QeljB/l1dGIaXSMA5yYkf8P0KHWncXVG6bWlTEe9jYL
// SIG // lqp2XFadYJGNII87k2pSuOhLUfMyB8Ywg5PSTGVQBOW1
// SIG // 6xnrFwg5U7DnCeYvdTSBUEYdbsBhoAeew7iYVIWiNLLS
// SIG // VIRxBLDwe1KLQ554gHk5hqkq+GxCVjo9oztMKZZQXMcn
// SIG // sRBe5PwkmdFG76FhgxQxYieN1hfZQrL9tm3neQCrMFTP
// SIG // 0FFfJH8BgS3xqsQnvS2OdHz2A3CmO6fgxYnH12ii3X1u
// SIG // kXsIE86HISCSMwWrbQ==
// SIG // End signature block
